$date
	Mon Jan  6 20:51:34 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module LALU_tb $end
$var reg 1 ! clk $end
$scope module lalu $end
$var wire 1 " CLOCK_50 $end
$var wire 1 # executiveOverride $end
$var wire 16 $ fetchAddress [15:0] $end
$var wire 16 % memAccessAddress [15:0] $end
$var wire 32 & memAccessInput [31:0] $end
$var wire 1 ' memAccessRden $end
$var wire 1 ( memAccessWren $end
$var wire 32 ) memAccessOutput [31:0] $end
$var wire 32 * instruction [31:0] $end
$var wire 32 + fetchOutput [31:0] $end
$var wire 3 , curFormat [2:0] $end
$var reg 16 - IP [15:0] $end
$var reg 16 . IP_d [15:0] $end
$var reg 16 / IP_f [15:0] $end
$var reg 5 0 Rd_d [4:0] $end
$var reg 5 1 Rs0_d [4:0] $end
$var reg 5 2 Rs1_d [4:0] $end
$var reg 5 3 Rs2_d [4:0] $end
$var reg 1 4 conditional $end
$var reg 16 5 expectedIP [15:0] $end
$var reg 1 6 extendedImmediate $end
$var reg 3 7 format [2:0] $end
$var reg 9 8 funcID [8:0] $end
$var reg 1 9 i0 $end
$var reg 1 : i1 $end
$var reg 1 ; i2 $end
$var reg 1 < isMemRead_d $end
$var reg 1 = isWriteback_d $end
$var reg 21 > jumpLoc [20:0] $end
$var reg 3 ? jumpPageLoc [2:0] $end
$var reg 1 @ negate $end
$var reg 1 A operationMode $end
$var reg 1 B sticky_d $end
$scope module MEM $end
$var wire 1 " clk $end
$var wire 16 C fetchAddress [15:0] $end
$var wire 16 D memAccessAddress [15:0] $end
$var wire 32 E memAccessData [31:0] $end
$var wire 1 ' memAccessRden $end
$var wire 1 ( memAccessWren $end
$var wire 1 A operationMode $end
$var wire 32 F userOut_memAccess [31:0] $end
$var wire 32 G userOut_fetch [31:0] $end
$var wire 32 H memAccessOutput [31:0] $end
$var wire 32 I kernOut_memAccess [31:0] $end
$var wire 32 J kernOut_fetch [31:0] $end
$var wire 32 K fetchOutput [31:0] $end
$scope module KERN_MEM $end
$var wire 15 L address_a [14:0] $end
$var wire 15 M address_b [14:0] $end
$var wire 1 " clk $end
$var wire 32 N data_a [31:0] $end
$var wire 32 O data_b [31:0] $end
$var wire 1 P rden_a $end
$var wire 1 ' rden_b $end
$var wire 1 Q wren_a $end
$var wire 1 ( wren_b $end
$var wire 32 R q_b [31:0] $end
$var wire 32 S q_a [31:0] $end
$var parameter 48 T initfile $end
$var parameter 32 U widthad $end
$scope module ram $end
$var wire 1 V aclr0 $end
$var wire 1 W aclr1 $end
$var wire 15 X address_a [14:0] $end
$var wire 15 Y address_b [14:0] $end
$var wire 1 Z addressstall_a $end
$var wire 1 [ addressstall_b $end
$var wire 1 \ byteena_a $end
$var wire 1 ] byteena_b $end
$var wire 1 " clock0 $end
$var wire 1 ^ clock1 $end
$var wire 1 _ clocken0 $end
$var wire 1 ` clocken1 $end
$var wire 1 a clocken2 $end
$var wire 1 b clocken3 $end
$var wire 32 c data_a [31:0] $end
$var wire 32 d data_b [31:0] $end
$var wire 3 e eccstatus [2:0] $end
$var wire 1 P rden_a $end
$var wire 1 ' rden_b $end
$var wire 1 Q wren_a $end
$var wire 1 ( wren_b $end
$var wire 32 f q_b [31:0] $end
$var wire 32 g q_a [31:0] $end
$var parameter 32 h address_aclr_a $end
$var parameter 32 i address_aclr_b $end
$var parameter 48 j address_reg_b $end
$var parameter 32 k byte_size $end
$var parameter 32 l byteena_aclr_a $end
$var parameter 32 m byteena_aclr_b $end
$var parameter 48 n byteena_reg_b $end
$var parameter 120 o clock_enable_core_a $end
$var parameter 120 p clock_enable_core_b $end
$var parameter 48 q clock_enable_input_a $end
$var parameter 48 r clock_enable_input_b $end
$var parameter 48 s clock_enable_output_a $end
$var parameter 48 t clock_enable_output_b $end
$var parameter 40 u ecc_pipeline_stage_enabled $end
$var parameter 40 v enable_ecc $end
$var parameter 32 w family_arria10 $end
$var parameter 24 x implement_in_les $end
$var parameter 32 y indata_aclr_a $end
$var parameter 32 z indata_aclr_b $end
$var parameter 48 { indata_reg_b $end
$var parameter 48 | init_file $end
$var parameter 48 } init_file_layout $end
$var parameter 72 ~ intended_device_family $end
$var parameter 48 !" lpm_hint $end
$var parameter 80 "" lpm_type $end
$var parameter 32 #" maximum_depth $end
$var parameter 47 $" numwords_a $end
$var parameter 47 %" numwords_b $end
$var parameter 120 &" operation_mode $end
$var parameter 32 '" outdata_aclr_a $end
$var parameter 32 (" outdata_aclr_b $end
$var parameter 96 )" outdata_reg_a $end
$var parameter 96 *" outdata_reg_b $end
$var parameter 40 +" power_up_uninitialized $end
$var parameter 32 ," ram_block_type $end
$var parameter 32 -" rdcontrol_aclr_b $end
$var parameter 48 ." rdcontrol_reg_b $end
$var parameter 64 /" read_during_write_mode_mixed_ports $end
$var parameter 160 0" read_during_write_mode_port_a $end
$var parameter 160 1" read_during_write_mode_port_b $end
$var parameter 32 2" width_a $end
$var parameter 32 3" width_b $end
$var parameter 32 4" width_byteena_a $end
$var parameter 32 5" width_byteena_b $end
$var parameter 32 6" width_eccstatus $end
$var parameter 32 7" widthad_a $end
$var parameter 32 8" widthad_b $end
$var parameter 32 9" wrcontrol_aclr_a $end
$var parameter 32 :" wrcontrol_aclr_b $end
$var parameter 48 ;" wrcontrol_wraddress_reg_b $end
$scope begin m_default $end
$scope module altsyncram_inst $end
$var wire 1 V aclr0 $end
$var wire 1 W aclr1 $end
$var wire 15 <" address_a [14:0] $end
$var wire 15 =" address_b [14:0] $end
$var wire 1 Z addressstall_a $end
$var wire 1 [ addressstall_b $end
$var wire 1 \ byteena_a $end
$var wire 1 ] byteena_b $end
$var wire 1 " clock0 $end
$var wire 1 ^ clock1 $end
$var wire 1 _ clocken0 $end
$var wire 1 ` clocken1 $end
$var wire 1 a clocken2 $end
$var wire 1 b clocken3 $end
$var wire 32 >" data_a [31:0] $end
$var wire 32 ?" data_b [31:0] $end
$var wire 3 @" eccstatus [2:0] $end
$var wire 1 A" i_address_aclr_a $end
$var wire 1 B" i_address_aclr_b $end
$var wire 1 C" i_byteena_a $end
$var wire 1 D" i_byteena_aclr_a $end
$var wire 1 E" i_byteena_aclr_b $end
$var wire 1 F" i_byteena_b $end
$var wire 1 G" i_clocken0 $end
$var wire 1 H" i_clocken0_b $end
$var wire 1 I" i_clocken1_b $end
$var wire 1 J" i_core_clocken0_b $end
$var wire 1 K" i_core_clocken1_b $end
$var wire 1 L" i_core_clocken_a $end
$var wire 1 M" i_core_clocken_b $end
$var wire 1 N" i_indata_aclr_a $end
$var wire 1 O" i_indata_aclr_b $end
$var wire 1 P" i_outdata_aclr_a $end
$var wire 1 Q" i_outdata_aclr_b $end
$var wire 1 R" i_outdata_clken_a $end
$var wire 1 S" i_outdata_clken_b $end
$var wire 1 T" i_outlatch_clken_a $end
$var wire 1 U" i_outlatch_clken_b $end
$var wire 1 V" i_rdcontrol_aclr_b $end
$var wire 1 W" i_wrcontrol_aclr_a $end
$var wire 1 X" i_wrcontrol_aclr_b $end
$var wire 32 Y" q_a [31:0] $end
$var wire 32 Z" q_b [31:0] $end
$var wire 1 P rden_a $end
$var wire 1 ' rden_b $end
$var wire 1 Q wren_a $end
$var wire 1 ( wren_b $end
$var wire 1 [" i_good_to_write_b $end
$var wire 1 \" i_good_to_write_a $end
$var parameter 32 ]" address_aclr_a $end
$var parameter 32 ^" address_aclr_b $end
$var parameter 48 _" address_reg_b $end
$var parameter 32 `" byte_size $end
$var parameter 32 a" byteena_aclr_a $end
$var parameter 32 b" byteena_aclr_b $end
$var parameter 48 c" byteena_reg_b $end
$var parameter 32 d" check_simultaneous_read_write $end
$var parameter 120 e" clock_enable_core_a $end
$var parameter 120 f" clock_enable_core_b $end
$var parameter 48 g" clock_enable_input_a $end
$var parameter 48 h" clock_enable_input_b $end
$var parameter 48 i" clock_enable_output_a $end
$var parameter 48 j" clock_enable_output_b $end
$var parameter 32 k" dual_port_addreg_b_clk0 $end
$var parameter 32 l" dual_port_addreg_b_clk1 $end
$var parameter 40 m" ecc_pipeline_stage_enabled $end
$var parameter 40 n" enable_ecc $end
$var parameter 32 o" enable_mem_data_b_reading $end
$var parameter 32 p" family_arria10 $end
$var parameter 32 q" family_arriaiigx $end
$var parameter 32 r" family_arriaiigz $end
$var parameter 32 s" family_arriav $end
$var parameter 32 t" family_arriavgz $end
$var parameter 32 u" family_arriavi $end
$var parameter 32 v" family_base_arriav $end
$var parameter 32 w" family_base_cycloneii $end
$var parameter 32 x" family_base_stratix $end
$var parameter 32 y" family_base_stratixii $end
$var parameter 32 z" family_cyclone $end
$var parameter 32 {" family_cycloneii $end
$var parameter 32 |" family_cycloneiii $end
$var parameter 32 }" family_cyclonev $end
$var parameter 32 ~" family_hardcopyii $end
$var parameter 32 !# family_hardcopyiii $end
$var parameter 32 "# family_hardcopyiv $end
$var parameter 32 ## family_has_lutram $end
$var parameter 32 $# family_has_m512 $end
$var parameter 32 %# family_has_megaram $end
$var parameter 32 &# family_has_stratixi_style_ram $end
$var parameter 32 '# family_has_stratixiii_style_ram $end
$var parameter 32 (# family_has_stratixv_style_ram $end
$var parameter 32 )# family_nightfury $end
$var parameter 32 *# family_stratix10 $end
$var parameter 32 +# family_stratixiii $end
$var parameter 32 ,# family_stratixv $end
$var parameter 32 -# family_zippleback $end
$var parameter 32 .# i_address_aclr_family_a $end
$var parameter 32 /# i_address_aclr_family_b $end
$var parameter 32 0# i_byte_size_tmp $end
$var parameter 32 1# i_lutram_read $end
$var parameter 24 2# implement_in_les $end
$var parameter 32 3# indata_aclr_a $end
$var parameter 32 4# indata_aclr_b $end
$var parameter 48 5# indata_reg_b $end
$var parameter 48 6# init_file $end
$var parameter 48 7# init_file_layout $end
$var parameter 72 8# intended_device_family $end
$var parameter 32 9# is_bidir_and_wrcontrol_addb_clk0 $end
$var parameter 32 :# is_bidir_and_wrcontrol_addb_clk1 $end
$var parameter 32 ;# is_lutram $end
$var parameter 32 <# is_write_on_positive_edge $end
$var parameter 48 =# lpm_hint $end
$var parameter 80 ># lpm_type $end
$var parameter 32 ?# lutram_dual_port_fast_read $end
$var parameter 32 @# lutram_single_port_fast_read $end
$var parameter 32 A# maximum_depth $end
$var parameter 47 B# numwords_a $end
$var parameter 47 C# numwords_b $end
$var parameter 120 D# operation_mode $end
$var parameter 32 E# outdata_aclr_a $end
$var parameter 32 F# outdata_aclr_b $end
$var parameter 96 G# outdata_reg_a $end
$var parameter 96 H# outdata_reg_b $end
$var parameter 40 I# power_up_uninitialized $end
$var parameter 32 J# ram_block_type $end
$var parameter 32 K# rdcontrol_aclr_b $end
$var parameter 48 L# rdcontrol_reg_b $end
$var parameter 64 M# read_during_write_mode_mixed_ports $end
$var parameter 160 N# read_during_write_mode_port_a $end
$var parameter 160 O# read_during_write_mode_port_b $end
$var parameter 32 P# s3_address_aclr_a $end
$var parameter 32 Q# s3_address_aclr_b $end
$var parameter 24 R# sim_show_memory_data_in_port_b_layout $end
$var parameter 32 S# width_a $end
$var parameter 32 T# width_b $end
$var parameter 32 U# width_byteena_a $end
$var parameter 32 V# width_byteena_b $end
$var parameter 32 W# width_eccstatus $end
$var parameter 32 X# widthad_a $end
$var parameter 32 Y# widthad_b $end
$var parameter 32 Z# wrcontrol_aclr_a $end
$var parameter 32 [# wrcontrol_aclr_b $end
$var parameter 48 \# wrcontrol_wraddress_reg_b $end
$var reg 47 ]# add_reg_a_mult_wa [46:0] $end
$var reg 47 ^# add_reg_a_mult_wa_pl_wa [46:0] $end
$var reg 47 _# add_reg_b_mult_wb [46:0] $end
$var reg 47 `# add_reg_b_mult_wb_pl_wb [46:0] $end
$var reg 169 a# cread_during_write_mode_mixed_ports [168:0] $end
$var reg 1 b# good_to_go_a $end
$var reg 1 c# good_to_go_b $end
$var reg 1 d# i_address_aclr_a_flag $end
$var reg 1 e# i_address_aclr_a_prev $end
$var reg 1 f# i_address_aclr_b_flag $end
$var reg 1 g# i_address_aclr_b_prev $end
$var reg 15 h# i_address_reg_a [14:0] $end
$var reg 15 i# i_address_reg_b [14:0] $end
$var reg 32 j# i_byteena_mask_reg_a [31:0] $end
$var reg 32 k# i_byteena_mask_reg_a_out [31:0] $end
$var reg 32 l# i_byteena_mask_reg_a_out_b [31:0] $end
$var reg 32 m# i_byteena_mask_reg_a_x [31:0] $end
$var reg 32 n# i_byteena_mask_reg_b [31:0] $end
$var reg 32 o# i_byteena_mask_reg_b_out [31:0] $end
$var reg 32 p# i_byteena_mask_reg_b_out_a [31:0] $end
$var reg 32 q# i_byteena_mask_reg_b_x [31:0] $end
$var reg 1 r# i_core_clocken0_b_reg $end
$var reg 1 s# i_core_clocken1_b_reg $end
$var reg 1 t# i_core_clocken_a_reg $end
$var reg 32 u# i_data_reg_a [31:0] $end
$var reg 32 v# i_data_reg_b [31:0] $end
$var reg 64 w# i_data_write_time_a [63:0] $end
$var reg 64 x# i_data_write_time_b [63:0] $end
$var reg 1 y# i_force_reread_a $end
$var reg 1 z# i_force_reread_a1 $end
$var reg 1 {# i_force_reread_a_signal $end
$var reg 1 |# i_force_reread_b $end
$var reg 1 }# i_force_reread_b1 $end
$var reg 1 ~# i_force_reread_b_signal $end
$var reg 1 !$ i_good_to_write_a2 $end
$var reg 1 "$ i_good_to_write_b2 $end
$var reg 1 #$ i_nmram_write_a $end
$var reg 1 $$ i_nmram_write_b $end
$var reg 15 %$ i_original_address_a [14:0] $end
$var reg 32 &$ i_original_data_a [31:0] $end
$var reg 32 '$ i_original_data_b [31:0] $end
$var reg 1 ($ i_outdata_aclr_a_prev $end
$var reg 1 )$ i_outdata_aclr_b_prev $end
$var reg 32 *$ i_q_reg_a [31:0] $end
$var reg 32 +$ i_q_reg_b [31:0] $end
$var reg 32 ,$ i_q_tmp2_a [31:0] $end
$var reg 32 -$ i_q_tmp2_b [31:0] $end
$var reg 32 .$ i_q_tmp_a [31:0] $end
$var reg 32 /$ i_q_tmp_b [31:0] $end
$var reg 57 0$ i_ram_block_type [56:0] $end
$var reg 1 1$ i_rden_reg_a $end
$var reg 1 2$ i_rden_reg_b $end
$var reg 1 3$ i_read_flag_a $end
$var reg 1 4$ i_read_flag_b $end
$var reg 1 5$ i_wren_reg_a $end
$var reg 1 6$ i_wren_reg_b $end
$var reg 1 7$ i_write_flag_a $end
$var reg 1 8$ i_write_flag_b $end
$var reg 1 9$ same_clock_pulse0 $end
$var reg 1 :$ same_clock_pulse1 $end
$var reg 32 ;$ temp_wa [31:0] $end
$var reg 32 <$ temp_wb [31:0] $end
$var reg 32 =$ wa_mult_x [31:0] $end
$var reg 32 >$ wa_mult_x_ii [31:0] $end
$var reg 32 ?$ wa_mult_x_iii [31:0] $end
$var integer 32 @$ i [31:0] $end
$var integer 32 A$ i2 [31:0] $end
$var integer 32 B$ i3 [31:0] $end
$var integer 32 C$ i4 [31:0] $end
$var integer 32 D$ i5 [31:0] $end
$var integer 32 E$ i_aclr_flag_a [31:0] $end
$var integer 32 F$ i_aclr_flag_b [31:0] $end
$var integer 32 G$ i_byte_size [31:0] $end
$var integer 32 H$ i_byteena_count [31:0] $end
$var integer 32 I$ i_numwords_a [31:0] $end
$var integer 32 J$ i_numwords_b [31:0] $end
$var integer 32 K$ i_q_tmp2_a_idx [31:0] $end
$var integer 32 L$ port_a_bit_count_high [31:0] $end
$var integer 32 M$ port_a_bit_count_low [31:0] $end
$var integer 32 N$ port_b_bit_count_high [31:0] $end
$var integer 32 O$ port_b_bit_count_low [31:0] $end
$scope module dev $end
$scope function FEATURE_FAMILY_ARRIA10 $end
$var reg 160 P$ device [160:1] $end
$var reg 1 Q$ var_family_arria10 $end
$upscope $end
$scope function FEATURE_FAMILY_ARRIAIIGX $end
$var reg 160 R$ device [160:1] $end
$var reg 1 S$ var_family_arriaiigx $end
$upscope $end
$scope function FEATURE_FAMILY_ARRIAIIGZ $end
$var reg 160 T$ device [160:1] $end
$var reg 1 U$ var_family_arriaiigz $end
$upscope $end
$scope function FEATURE_FAMILY_ARRIAV $end
$var reg 160 V$ device [160:1] $end
$var reg 1 W$ var_family_arriav $end
$upscope $end
$scope function FEATURE_FAMILY_ARRIAVGZ $end
$var reg 160 X$ device [160:1] $end
$var reg 1 Y$ var_family_arriavgz $end
$upscope $end
$scope function FEATURE_FAMILY_BASE_CYCLONE $end
$var reg 160 Z$ device [160:1] $end
$var reg 1 [$ var_family_base_cyclone $end
$upscope $end
$scope function FEATURE_FAMILY_BASE_CYCLONEII $end
$var reg 160 \$ device [160:1] $end
$var reg 1 ]$ var_family_base_cycloneii $end
$upscope $end
$scope function FEATURE_FAMILY_BASE_STRATIX $end
$var reg 160 ^$ device [160:1] $end
$var reg 1 _$ var_family_base_stratix $end
$upscope $end
$scope function FEATURE_FAMILY_BASE_STRATIXII $end
$var reg 160 `$ device [160:1] $end
$var reg 1 a$ var_family_base_stratixii $end
$upscope $end
$scope function FEATURE_FAMILY_CYCLONE $end
$var reg 160 b$ device [160:1] $end
$var reg 1 c$ var_family_cyclone $end
$upscope $end
$scope function FEATURE_FAMILY_CYCLONE10LP $end
$var reg 160 d$ device [160:1] $end
$var reg 1 e$ var_family_cyclone10lp $end
$upscope $end
$scope function FEATURE_FAMILY_CYCLONEII $end
$var reg 160 f$ device [160:1] $end
$var reg 1 g$ var_family_cycloneii $end
$upscope $end
$scope function FEATURE_FAMILY_CYCLONEIII $end
$var reg 160 h$ device [160:1] $end
$var reg 1 i$ var_family_cycloneiii $end
$upscope $end
$scope function FEATURE_FAMILY_CYCLONEIVE $end
$var reg 160 j$ device [160:1] $end
$var reg 1 k$ var_family_cycloneive $end
$upscope $end
$scope function FEATURE_FAMILY_CYCLONEIVGX $end
$var reg 160 l$ device [160:1] $end
$var reg 1 m$ var_family_cycloneivgx $end
$upscope $end
$scope function FEATURE_FAMILY_CYCLONEV $end
$var reg 160 n$ device [160:1] $end
$var reg 1 o$ var_family_cyclonev $end
$upscope $end
$scope function FEATURE_FAMILY_HARDCOPYIII $end
$var reg 160 p$ device [160:1] $end
$var reg 1 q$ var_family_hardcopyiii $end
$upscope $end
$scope function FEATURE_FAMILY_HARDCOPYIV $end
$var reg 160 r$ device [160:1] $end
$var reg 1 s$ var_family_hardcopyiv $end
$upscope $end
$scope function FEATURE_FAMILY_HAS_ALTERA_MULT_ADD_FLOW $end
$var reg 160 t$ device [160:1] $end
$var reg 1 u$ var_family_has_altera_mult_add_flow $end
$upscope $end
$scope function FEATURE_FAMILY_HAS_INVERTED_OUTPUT_DDIO $end
$var reg 160 v$ device [160:1] $end
$var reg 1 w$ var_family_has_inverted_output_ddio $end
$upscope $end
$scope function FEATURE_FAMILY_HAS_STRATIXIII_STYLE_RAM $end
$var reg 160 x$ device [160:1] $end
$var reg 1 y$ var_family_has_stratixiii_style_ram $end
$upscope $end
$scope function FEATURE_FAMILY_HAS_STRATIXII_STYLE_PLL $end
$var reg 160 z$ device [160:1] $end
$var reg 1 {$ var_family_has_stratixii_style_pll $end
$upscope $end
$scope function FEATURE_FAMILY_HAS_STRATIXII_STYLE_RAM $end
$var reg 160 |$ device [160:1] $end
$var reg 1 }$ var_family_has_stratixii_style_ram $end
$upscope $end
$scope function FEATURE_FAMILY_HAS_STRATIX_STYLE_PLL $end
$var reg 160 ~$ device [160:1] $end
$var reg 1 !% var_family_has_stratix_style_pll $end
$upscope $end
$scope function FEATURE_FAMILY_IS_ALTMULT_ADD_EOL $end
$var reg 160 "% device [160:1] $end
$var reg 1 #% var_family_is_altmult_add_eol $end
$upscope $end
$scope function FEATURE_FAMILY_MAX10 $end
$var reg 160 $% device [160:1] $end
$var reg 1 %% var_family_max10 $end
$upscope $end
$scope function FEATURE_FAMILY_MAXII $end
$var reg 160 &% device [160:1] $end
$var reg 1 '% var_family_maxii $end
$upscope $end
$scope function FEATURE_FAMILY_MAXV $end
$var reg 160 (% device [160:1] $end
$var reg 1 )% var_family_maxv $end
$upscope $end
$scope function FEATURE_FAMILY_STRATIX $end
$var reg 160 *% device [160:1] $end
$var reg 1 +% var_family_stratix $end
$upscope $end
$scope function FEATURE_FAMILY_STRATIX10 $end
$var reg 160 ,% device [160:1] $end
$var reg 1 -% var_family_stratix10 $end
$upscope $end
$scope function FEATURE_FAMILY_STRATIXGX $end
$var reg 160 .% device [160:1] $end
$var reg 1 /% var_family_stratixgx $end
$upscope $end
$scope function FEATURE_FAMILY_STRATIXII $end
$var reg 160 0% device [160:1] $end
$var reg 1 1% var_family_stratixii $end
$upscope $end
$scope function FEATURE_FAMILY_STRATIXIIGX $end
$var reg 160 2% device [160:1] $end
$var reg 1 3% var_family_stratixiigx $end
$upscope $end
$scope function FEATURE_FAMILY_STRATIXIII $end
$var reg 160 4% device [160:1] $end
$var reg 1 5% var_family_stratixiii $end
$upscope $end
$scope function FEATURE_FAMILY_STRATIXIV $end
$var reg 160 6% device [160:1] $end
$var reg 1 7% var_family_stratixiv $end
$upscope $end
$scope function FEATURE_FAMILY_STRATIXV $end
$var reg 160 8% device [160:1] $end
$var reg 1 9% var_family_stratixv $end
$upscope $end
$scope function FEATURE_FAMILY_STRATIX_HC $end
$var reg 160 :% device [160:1] $end
$var reg 1 ;% var_family_stratix_hc $end
$upscope $end
$scope function IS_FAMILY_ARRIA10 $end
$var reg 160 <% device [160:1] $end
$var reg 1 =% is_arria10 $end
$upscope $end
$scope function IS_FAMILY_ARRIAGX $end
$var reg 160 >% device [160:1] $end
$var reg 1 ?% is_arriagx $end
$upscope $end
$scope function IS_FAMILY_ARRIAIIGX $end
$var reg 160 @% device [160:1] $end
$var reg 1 A% is_arriaiigx $end
$upscope $end
$scope function IS_FAMILY_ARRIAIIGZ $end
$var reg 160 B% device [160:1] $end
$var reg 1 C% is_arriaiigz $end
$upscope $end
$scope function IS_FAMILY_ARRIAV $end
$var reg 160 D% device [160:1] $end
$var reg 1 E% is_arriav $end
$upscope $end
$scope function IS_FAMILY_ARRIAVGZ $end
$var reg 160 F% device [160:1] $end
$var reg 1 G% is_arriavgz $end
$upscope $end
$scope function IS_FAMILY_CYCLONE $end
$var reg 160 H% device [160:1] $end
$var reg 1 I% is_cyclone $end
$upscope $end
$scope function IS_FAMILY_CYCLONE10LP $end
$var reg 160 J% device [160:1] $end
$var reg 1 K% is_cyclone10lp $end
$upscope $end
$scope function IS_FAMILY_CYCLONEII $end
$var reg 160 L% device [160:1] $end
$var reg 1 M% is_cycloneii $end
$upscope $end
$scope function IS_FAMILY_CYCLONEIII $end
$var reg 160 N% device [160:1] $end
$var reg 1 O% is_cycloneiii $end
$upscope $end
$scope function IS_FAMILY_CYCLONEIIILS $end
$var reg 160 P% device [160:1] $end
$var reg 1 Q% is_cycloneiiils $end
$upscope $end
$scope function IS_FAMILY_CYCLONEIVE $end
$var reg 160 R% device [160:1] $end
$var reg 1 S% is_cycloneive $end
$upscope $end
$scope function IS_FAMILY_CYCLONEIVGX $end
$var reg 160 T% device [160:1] $end
$var reg 1 U% is_cycloneivgx $end
$upscope $end
$scope function IS_FAMILY_CYCLONEV $end
$var reg 160 V% device [160:1] $end
$var reg 1 W% is_cyclonev $end
$upscope $end
$scope function IS_FAMILY_HARDCOPYII $end
$var reg 160 X% device [160:1] $end
$var reg 1 Y% is_hardcopyii $end
$upscope $end
$scope function IS_FAMILY_HARDCOPYIII $end
$var reg 160 Z% device [160:1] $end
$var reg 1 [% is_hardcopyiii $end
$upscope $end
$scope function IS_FAMILY_HARDCOPYIV $end
$var reg 160 \% device [160:1] $end
$var reg 1 ]% is_hardcopyiv $end
$upscope $end
$scope function IS_FAMILY_MAX10 $end
$var reg 160 ^% device [160:1] $end
$var reg 1 _% is_max10 $end
$upscope $end
$scope function IS_FAMILY_MAXII $end
$var reg 160 `% device [160:1] $end
$var reg 1 a% is_maxii $end
$upscope $end
$scope function IS_FAMILY_MAXV $end
$var reg 160 b% device [160:1] $end
$var reg 1 c% is_maxv $end
$upscope $end
$scope function IS_FAMILY_STRATIX $end
$var reg 160 d% device [160:1] $end
$var reg 1 e% is_stratix $end
$upscope $end
$scope function IS_FAMILY_STRATIX10 $end
$var reg 160 f% device [160:1] $end
$var reg 1 g% is_stratix10 $end
$upscope $end
$scope function IS_FAMILY_STRATIXGX $end
$var reg 160 h% device [160:1] $end
$var reg 1 i% is_stratixgx $end
$upscope $end
$scope function IS_FAMILY_STRATIXII $end
$var reg 160 j% device [160:1] $end
$var reg 1 k% is_stratixii $end
$upscope $end
$scope function IS_FAMILY_STRATIXIIGX $end
$var reg 160 l% device [160:1] $end
$var reg 1 m% is_stratixiigx $end
$upscope $end
$scope function IS_FAMILY_STRATIXIII $end
$var reg 160 n% device [160:1] $end
$var reg 1 o% is_stratixiii $end
$upscope $end
$scope function IS_FAMILY_STRATIXIV $end
$var reg 160 p% device [160:1] $end
$var reg 1 q% is_stratixiv $end
$upscope $end
$scope function IS_FAMILY_STRATIXV $end
$var reg 160 r% device [160:1] $end
$var reg 1 s% is_stratixv $end
$upscope $end
$scope function IS_VALID_FAMILY $end
$var reg 160 t% device [160:1] $end
$var reg 1 u% is_valid $end
$upscope $end
$upscope $end
$scope module mem $end
$scope function ecc_parity $end
$var reg 8 v% i_eccencparity [7:0] $end
$var integer 32 w% err [31:0] $end
$var integer 32 x% flag [31:0] $end
$var integer 32 y% flag_double [31:0] $end
$var integer 32 z% flag_err [31:0] $end
$var integer 32 {% flag_no_err [31:0] $end
$var integer 32 |% flag_single [31:0] $end
$var integer 32 }% flag_triple [31:0] $end
$var integer 32 ~% flag_uncorr [31:0] $end
$var integer 32 !& found [31:0] $end
$var integer 32 "& found_2 [31:0] $end
$var integer 32 #& n [31:0] $end
$var integer 32 $& pointer [31:0] $end
$var integer 32 %& pointer_max [31:0] $end
$var integer 32 && pointer_min [31:0] $end
$upscope $end
$scope function tolower $end
$var reg 8 '& conv_char [8:1] $end
$var reg 8 (& given_character [8:1] $end
$upscope $end
$scope task convert_hex2ver $end
$var reg 8 )& c [8:1] $end
$var reg 1 *& done $end
$var reg 1 +& error_status $end
$var reg 1 ,& first_normal_record $end
$var reg 1 -& first_rec $end
$var reg 4 .& hex [3:0] $end
$var reg 2048 /& in_file [2048:1] $end
$var reg 1 0& is_word_address_format $end
$var reg 1 1& last_rec $end
$var reg 2048 2& out_file [2048:1] $end
$var integer 32 3& aaaa [31:0] $end
$var integer 32 4& aaaa_pre [31:0] $end
$var integer 32 5& aah [31:0] $end
$var integer 32 6& aal [31:0] $end
$var integer 32 7& cc [31:0] $end
$var integer 32 8& dd [31:0] $end
$var integer 32 9& divide_factor [31:0] $end
$var integer 32 :& i [31:0] $end
$var integer 32 ;& ifp [31:0] $end
$var integer 32 <& j [31:0] $end
$var integer 32 =& k [31:0] $end
$var integer 32 >& line_no [31:0] $end
$var integer 32 ?& m [31:0] $end
$var integer 32 @& nn [31:0] $end
$var integer 32 A& off_addr [31:0] $end
$var integer 32 B& ofp [31:0] $end
$var integer 32 C& r [31:0] $end
$var integer 32 D& sum [31:0] $end
$var integer 32 E& tt [31:0] $end
$var integer 32 F& width [31:0] $end
$scope begin READER $end
$upscope $end
$upscope $end
$scope task convert_mif2ver $end
$var reg 24 G& address_radix [24:1] $end
$var reg 1 H& address_radix_found $end
$var reg 2048 I& buffer [2048:1] $end
$var reg 8 J& c [8:1] $end
$var reg 24 K& data_radix [24:1] $end
$var reg 1 L& data_radix_found $end
$var reg 1 M& depth_found $end
$var reg 1 N& display_address $end
$var reg 1 O& done $end
$var reg 1 P& error_status $end
$var reg 1 Q& first_rec $end
$var reg 1 R& get_address $end
$var reg 1 S& get_address_data_pairs $end
$var reg 1 T& get_address_radix $end
$var reg 1 U& get_data $end
$var reg 1 V& get_data_radix $end
$var reg 1 W& get_depth $end
$var reg 1 X& get_end_address $end
$var reg 1 Y& get_start_address $end
$var reg 1 Z& get_width $end
$var reg 4 [& hex [3:0] $end
$var reg 2048 \& in_file [2048:1] $end
$var reg 1 ]& invalid_address $end
$var reg 1 ^& last_rec $end
$var reg 1025 _& memory_data1 [1024:0] $end
$var reg 1025 `& memory_data2 [1024:0] $end
$var reg 2048 a& out_file [2048:1] $end
$var reg 4 b& tmp_char [3:0] $end
$var reg 1 c& width_found $end
$var integer 32 d& aah [31:0] $end
$var integer 32 e& aal [31:0] $end
$var integer 32 f& address [31:0] $end
$var integer 32 g& cc [31:0] $end
$var integer 32 h& character_count [31:0] $end
$var integer 32 i& comment_with_double_minus_found [31:0] $end
$var integer 32 j& comment_with_percent_found [31:0] $end
$var integer 32 k& dd [31:0] $end
$var integer 32 l& end_address [31:0] $end
$var integer 32 m& i [31:0] $end
$var integer 32 n& ifp [31:0] $end
$var integer 32 o& line_no [31:0] $end
$var integer 32 p& memory_depth [31:0] $end
$var integer 32 q& memory_width [31:0] $end
$var integer 32 r& negative [31:0] $end
$var integer 32 s& nn [31:0] $end
$var integer 32 t& off_addr [31:0] $end
$var integer 32 u& ofp [31:0] $end
$var integer 32 v& r [31:0] $end
$var integer 32 w& start_address [31:0] $end
$var integer 32 x& sum [31:0] $end
$var integer 32 y& tt [31:0] $end
$var integer 32 z& value [31:0] $end
$var integer 32 {& width [31:0] $end
$scope begin READER $end
$upscope $end
$upscope $end
$scope task convert_to_ver_file $end
$var reg 2048 |& in_file [2048:1] $end
$var reg 2048 }& out_file [2048:1] $end
$var integer 32 ~& width [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module USER_MEM $end
$var wire 16 !' address_a [15:0] $end
$var wire 16 "' address_b [15:0] $end
$var wire 1 " clk $end
$var wire 32 #' data_a [31:0] $end
$var wire 32 $' data_b [31:0] $end
$var wire 1 %' rden_a $end
$var wire 1 ' rden_b $end
$var wire 1 &' wren_a $end
$var wire 1 ( wren_b $end
$var wire 32 '' q_b [31:0] $end
$var wire 32 (' q_a [31:0] $end
$var parameter 56 )' initfile $end
$var parameter 32 *' widthad $end
$scope module ram $end
$var wire 1 +' aclr0 $end
$var wire 1 ,' aclr1 $end
$var wire 16 -' address_a [15:0] $end
$var wire 16 .' address_b [15:0] $end
$var wire 1 /' addressstall_a $end
$var wire 1 0' addressstall_b $end
$var wire 1 1' byteena_a $end
$var wire 1 2' byteena_b $end
$var wire 1 " clock0 $end
$var wire 1 3' clock1 $end
$var wire 1 4' clocken0 $end
$var wire 1 5' clocken1 $end
$var wire 1 6' clocken2 $end
$var wire 1 7' clocken3 $end
$var wire 32 8' data_a [31:0] $end
$var wire 32 9' data_b [31:0] $end
$var wire 3 :' eccstatus [2:0] $end
$var wire 1 %' rden_a $end
$var wire 1 ' rden_b $end
$var wire 1 &' wren_a $end
$var wire 1 ( wren_b $end
$var wire 32 ;' q_b [31:0] $end
$var wire 32 <' q_a [31:0] $end
$var parameter 32 =' address_aclr_a $end
$var parameter 32 >' address_aclr_b $end
$var parameter 48 ?' address_reg_b $end
$var parameter 32 @' byte_size $end
$var parameter 32 A' byteena_aclr_a $end
$var parameter 32 B' byteena_aclr_b $end
$var parameter 48 C' byteena_reg_b $end
$var parameter 120 D' clock_enable_core_a $end
$var parameter 120 E' clock_enable_core_b $end
$var parameter 48 F' clock_enable_input_a $end
$var parameter 48 G' clock_enable_input_b $end
$var parameter 48 H' clock_enable_output_a $end
$var parameter 48 I' clock_enable_output_b $end
$var parameter 40 J' ecc_pipeline_stage_enabled $end
$var parameter 40 K' enable_ecc $end
$var parameter 32 L' family_arria10 $end
$var parameter 24 M' implement_in_les $end
$var parameter 32 N' indata_aclr_a $end
$var parameter 32 O' indata_aclr_b $end
$var parameter 48 P' indata_reg_b $end
$var parameter 56 Q' init_file $end
$var parameter 48 R' init_file_layout $end
$var parameter 72 S' intended_device_family $end
$var parameter 48 T' lpm_hint $end
$var parameter 80 U' lpm_type $end
$var parameter 32 V' maximum_depth $end
$var parameter 48 W' numwords_a $end
$var parameter 48 X' numwords_b $end
$var parameter 120 Y' operation_mode $end
$var parameter 32 Z' outdata_aclr_a $end
$var parameter 32 [' outdata_aclr_b $end
$var parameter 96 \' outdata_reg_a $end
$var parameter 96 ]' outdata_reg_b $end
$var parameter 40 ^' power_up_uninitialized $end
$var parameter 32 _' ram_block_type $end
$var parameter 32 `' rdcontrol_aclr_b $end
$var parameter 48 a' rdcontrol_reg_b $end
$var parameter 64 b' read_during_write_mode_mixed_ports $end
$var parameter 160 c' read_during_write_mode_port_a $end
$var parameter 160 d' read_during_write_mode_port_b $end
$var parameter 32 e' width_a $end
$var parameter 32 f' width_b $end
$var parameter 32 g' width_byteena_a $end
$var parameter 32 h' width_byteena_b $end
$var parameter 32 i' width_eccstatus $end
$var parameter 32 j' widthad_a $end
$var parameter 32 k' widthad_b $end
$var parameter 32 l' wrcontrol_aclr_a $end
$var parameter 32 m' wrcontrol_aclr_b $end
$var parameter 48 n' wrcontrol_wraddress_reg_b $end
$scope begin m_default $end
$scope module altsyncram_inst $end
$var wire 1 +' aclr0 $end
$var wire 1 ,' aclr1 $end
$var wire 16 o' address_a [15:0] $end
$var wire 16 p' address_b [15:0] $end
$var wire 1 /' addressstall_a $end
$var wire 1 0' addressstall_b $end
$var wire 1 1' byteena_a $end
$var wire 1 2' byteena_b $end
$var wire 1 " clock0 $end
$var wire 1 3' clock1 $end
$var wire 1 4' clocken0 $end
$var wire 1 5' clocken1 $end
$var wire 1 6' clocken2 $end
$var wire 1 7' clocken3 $end
$var wire 32 q' data_a [31:0] $end
$var wire 32 r' data_b [31:0] $end
$var wire 3 s' eccstatus [2:0] $end
$var wire 1 t' i_address_aclr_a $end
$var wire 1 u' i_address_aclr_b $end
$var wire 1 v' i_byteena_a $end
$var wire 1 w' i_byteena_aclr_a $end
$var wire 1 x' i_byteena_aclr_b $end
$var wire 1 y' i_byteena_b $end
$var wire 1 z' i_clocken0 $end
$var wire 1 {' i_clocken0_b $end
$var wire 1 |' i_clocken1_b $end
$var wire 1 }' i_core_clocken0_b $end
$var wire 1 ~' i_core_clocken1_b $end
$var wire 1 !( i_core_clocken_a $end
$var wire 1 "( i_core_clocken_b $end
$var wire 1 #( i_indata_aclr_a $end
$var wire 1 $( i_indata_aclr_b $end
$var wire 1 %( i_outdata_aclr_a $end
$var wire 1 &( i_outdata_aclr_b $end
$var wire 1 '( i_outdata_clken_a $end
$var wire 1 (( i_outdata_clken_b $end
$var wire 1 )( i_outlatch_clken_a $end
$var wire 1 *( i_outlatch_clken_b $end
$var wire 1 +( i_rdcontrol_aclr_b $end
$var wire 1 ,( i_wrcontrol_aclr_a $end
$var wire 1 -( i_wrcontrol_aclr_b $end
$var wire 32 .( q_a [31:0] $end
$var wire 32 /( q_b [31:0] $end
$var wire 1 %' rden_a $end
$var wire 1 ' rden_b $end
$var wire 1 &' wren_a $end
$var wire 1 ( wren_b $end
$var wire 1 0( i_good_to_write_b $end
$var wire 1 1( i_good_to_write_a $end
$var parameter 32 2( address_aclr_a $end
$var parameter 32 3( address_aclr_b $end
$var parameter 48 4( address_reg_b $end
$var parameter 32 5( byte_size $end
$var parameter 32 6( byteena_aclr_a $end
$var parameter 32 7( byteena_aclr_b $end
$var parameter 48 8( byteena_reg_b $end
$var parameter 32 9( check_simultaneous_read_write $end
$var parameter 120 :( clock_enable_core_a $end
$var parameter 120 ;( clock_enable_core_b $end
$var parameter 48 <( clock_enable_input_a $end
$var parameter 48 =( clock_enable_input_b $end
$var parameter 48 >( clock_enable_output_a $end
$var parameter 48 ?( clock_enable_output_b $end
$var parameter 32 @( dual_port_addreg_b_clk0 $end
$var parameter 32 A( dual_port_addreg_b_clk1 $end
$var parameter 40 B( ecc_pipeline_stage_enabled $end
$var parameter 40 C( enable_ecc $end
$var parameter 32 D( enable_mem_data_b_reading $end
$var parameter 32 E( family_arria10 $end
$var parameter 32 F( family_arriaiigx $end
$var parameter 32 G( family_arriaiigz $end
$var parameter 32 H( family_arriav $end
$var parameter 32 I( family_arriavgz $end
$var parameter 32 J( family_arriavi $end
$var parameter 32 K( family_base_arriav $end
$var parameter 32 L( family_base_cycloneii $end
$var parameter 32 M( family_base_stratix $end
$var parameter 32 N( family_base_stratixii $end
$var parameter 32 O( family_cyclone $end
$var parameter 32 P( family_cycloneii $end
$var parameter 32 Q( family_cycloneiii $end
$var parameter 32 R( family_cyclonev $end
$var parameter 32 S( family_hardcopyii $end
$var parameter 32 T( family_hardcopyiii $end
$var parameter 32 U( family_hardcopyiv $end
$var parameter 32 V( family_has_lutram $end
$var parameter 32 W( family_has_m512 $end
$var parameter 32 X( family_has_megaram $end
$var parameter 32 Y( family_has_stratixi_style_ram $end
$var parameter 32 Z( family_has_stratixiii_style_ram $end
$var parameter 32 [( family_has_stratixv_style_ram $end
$var parameter 32 \( family_nightfury $end
$var parameter 32 ]( family_stratix10 $end
$var parameter 32 ^( family_stratixiii $end
$var parameter 32 _( family_stratixv $end
$var parameter 32 `( family_zippleback $end
$var parameter 32 a( i_address_aclr_family_a $end
$var parameter 32 b( i_address_aclr_family_b $end
$var parameter 32 c( i_byte_size_tmp $end
$var parameter 32 d( i_lutram_read $end
$var parameter 24 e( implement_in_les $end
$var parameter 32 f( indata_aclr_a $end
$var parameter 32 g( indata_aclr_b $end
$var parameter 48 h( indata_reg_b $end
$var parameter 56 i( init_file $end
$var parameter 48 j( init_file_layout $end
$var parameter 72 k( intended_device_family $end
$var parameter 32 l( is_bidir_and_wrcontrol_addb_clk0 $end
$var parameter 32 m( is_bidir_and_wrcontrol_addb_clk1 $end
$var parameter 32 n( is_lutram $end
$var parameter 32 o( is_write_on_positive_edge $end
$var parameter 48 p( lpm_hint $end
$var parameter 80 q( lpm_type $end
$var parameter 32 r( lutram_dual_port_fast_read $end
$var parameter 32 s( lutram_single_port_fast_read $end
$var parameter 32 t( maximum_depth $end
$var parameter 48 u( numwords_a $end
$var parameter 48 v( numwords_b $end
$var parameter 120 w( operation_mode $end
$var parameter 32 x( outdata_aclr_a $end
$var parameter 32 y( outdata_aclr_b $end
$var parameter 96 z( outdata_reg_a $end
$var parameter 96 {( outdata_reg_b $end
$var parameter 40 |( power_up_uninitialized $end
$var parameter 32 }( ram_block_type $end
$var parameter 32 ~( rdcontrol_aclr_b $end
$var parameter 48 !) rdcontrol_reg_b $end
$var parameter 64 ") read_during_write_mode_mixed_ports $end
$var parameter 160 #) read_during_write_mode_port_a $end
$var parameter 160 $) read_during_write_mode_port_b $end
$var parameter 32 %) s3_address_aclr_a $end
$var parameter 32 &) s3_address_aclr_b $end
$var parameter 24 ') sim_show_memory_data_in_port_b_layout $end
$var parameter 32 () width_a $end
$var parameter 32 )) width_b $end
$var parameter 32 *) width_byteena_a $end
$var parameter 32 +) width_byteena_b $end
$var parameter 32 ,) width_eccstatus $end
$var parameter 32 -) widthad_a $end
$var parameter 32 .) widthad_b $end
$var parameter 32 /) wrcontrol_aclr_a $end
$var parameter 32 0) wrcontrol_aclr_b $end
$var parameter 48 1) wrcontrol_wraddress_reg_b $end
$var reg 48 2) add_reg_a_mult_wa [47:0] $end
$var reg 48 3) add_reg_a_mult_wa_pl_wa [47:0] $end
$var reg 48 4) add_reg_b_mult_wb [47:0] $end
$var reg 48 5) add_reg_b_mult_wb_pl_wb [47:0] $end
$var reg 169 6) cread_during_write_mode_mixed_ports [168:0] $end
$var reg 1 7) good_to_go_a $end
$var reg 1 8) good_to_go_b $end
$var reg 1 9) i_address_aclr_a_flag $end
$var reg 1 :) i_address_aclr_a_prev $end
$var reg 1 ;) i_address_aclr_b_flag $end
$var reg 1 <) i_address_aclr_b_prev $end
$var reg 16 =) i_address_reg_a [15:0] $end
$var reg 16 >) i_address_reg_b [15:0] $end
$var reg 32 ?) i_byteena_mask_reg_a [31:0] $end
$var reg 32 @) i_byteena_mask_reg_a_out [31:0] $end
$var reg 32 A) i_byteena_mask_reg_a_out_b [31:0] $end
$var reg 32 B) i_byteena_mask_reg_a_x [31:0] $end
$var reg 32 C) i_byteena_mask_reg_b [31:0] $end
$var reg 32 D) i_byteena_mask_reg_b_out [31:0] $end
$var reg 32 E) i_byteena_mask_reg_b_out_a [31:0] $end
$var reg 32 F) i_byteena_mask_reg_b_x [31:0] $end
$var reg 1 G) i_core_clocken0_b_reg $end
$var reg 1 H) i_core_clocken1_b_reg $end
$var reg 1 I) i_core_clocken_a_reg $end
$var reg 32 J) i_data_reg_a [31:0] $end
$var reg 32 K) i_data_reg_b [31:0] $end
$var reg 64 L) i_data_write_time_a [63:0] $end
$var reg 64 M) i_data_write_time_b [63:0] $end
$var reg 1 N) i_force_reread_a $end
$var reg 1 O) i_force_reread_a1 $end
$var reg 1 P) i_force_reread_a_signal $end
$var reg 1 Q) i_force_reread_b $end
$var reg 1 R) i_force_reread_b1 $end
$var reg 1 S) i_force_reread_b_signal $end
$var reg 1 T) i_good_to_write_a2 $end
$var reg 1 U) i_good_to_write_b2 $end
$var reg 1 V) i_nmram_write_a $end
$var reg 1 W) i_nmram_write_b $end
$var reg 16 X) i_original_address_a [15:0] $end
$var reg 32 Y) i_original_data_a [31:0] $end
$var reg 32 Z) i_original_data_b [31:0] $end
$var reg 1 [) i_outdata_aclr_a_prev $end
$var reg 1 \) i_outdata_aclr_b_prev $end
$var reg 32 ]) i_q_reg_a [31:0] $end
$var reg 32 ^) i_q_reg_b [31:0] $end
$var reg 32 _) i_q_tmp2_a [31:0] $end
$var reg 32 `) i_q_tmp2_b [31:0] $end
$var reg 32 a) i_q_tmp_a [31:0] $end
$var reg 32 b) i_q_tmp_b [31:0] $end
$var reg 57 c) i_ram_block_type [56:0] $end
$var reg 1 d) i_rden_reg_a $end
$var reg 1 e) i_rden_reg_b $end
$var reg 1 f) i_read_flag_a $end
$var reg 1 g) i_read_flag_b $end
$var reg 1 h) i_wren_reg_a $end
$var reg 1 i) i_wren_reg_b $end
$var reg 1 j) i_write_flag_a $end
$var reg 1 k) i_write_flag_b $end
$var reg 1 l) init_file_b_port $end
$var reg 2048 m) ram_initf [2048:1] $end
$var reg 1 n) same_clock_pulse0 $end
$var reg 1 o) same_clock_pulse1 $end
$var reg 32 p) temp_wa [31:0] $end
$var reg 32 q) temp_wb [31:0] $end
$var reg 32 r) wa_mult_x [31:0] $end
$var reg 32 s) wa_mult_x_ii [31:0] $end
$var reg 32 t) wa_mult_x_iii [31:0] $end
$var integer 32 u) i [31:0] $end
$var integer 32 v) i2 [31:0] $end
$var integer 32 w) i3 [31:0] $end
$var integer 32 x) i4 [31:0] $end
$var integer 32 y) i5 [31:0] $end
$var integer 32 z) i_aclr_flag_a [31:0] $end
$var integer 32 {) i_aclr_flag_b [31:0] $end
$var integer 32 |) i_byte_size [31:0] $end
$var integer 32 }) i_byteena_count [31:0] $end
$var integer 32 ~) i_div_wa [31:0] $end
$var integer 32 !* i_numwords_a [31:0] $end
$var integer 32 "* i_numwords_b [31:0] $end
$var integer 32 #* i_q_tmp2_a_idx [31:0] $end
$var integer 32 $* port_a_bit_count_high [31:0] $end
$var integer 32 %* port_a_bit_count_low [31:0] $end
$var integer 32 &* port_b_bit_count_high [31:0] $end
$var integer 32 '* port_b_bit_count_low [31:0] $end
$scope module dev $end
$scope function FEATURE_FAMILY_ARRIA10 $end
$var reg 160 (* device [160:1] $end
$var reg 1 )* var_family_arria10 $end
$upscope $end
$scope function FEATURE_FAMILY_ARRIAIIGX $end
$var reg 160 ** device [160:1] $end
$var reg 1 +* var_family_arriaiigx $end
$upscope $end
$scope function FEATURE_FAMILY_ARRIAIIGZ $end
$var reg 160 ,* device [160:1] $end
$var reg 1 -* var_family_arriaiigz $end
$upscope $end
$scope function FEATURE_FAMILY_ARRIAV $end
$var reg 160 .* device [160:1] $end
$var reg 1 /* var_family_arriav $end
$upscope $end
$scope function FEATURE_FAMILY_ARRIAVGZ $end
$var reg 160 0* device [160:1] $end
$var reg 1 1* var_family_arriavgz $end
$upscope $end
$scope function FEATURE_FAMILY_BASE_CYCLONE $end
$var reg 160 2* device [160:1] $end
$var reg 1 3* var_family_base_cyclone $end
$upscope $end
$scope function FEATURE_FAMILY_BASE_CYCLONEII $end
$var reg 160 4* device [160:1] $end
$var reg 1 5* var_family_base_cycloneii $end
$upscope $end
$scope function FEATURE_FAMILY_BASE_STRATIX $end
$var reg 160 6* device [160:1] $end
$var reg 1 7* var_family_base_stratix $end
$upscope $end
$scope function FEATURE_FAMILY_BASE_STRATIXII $end
$var reg 160 8* device [160:1] $end
$var reg 1 9* var_family_base_stratixii $end
$upscope $end
$scope function FEATURE_FAMILY_CYCLONE $end
$var reg 160 :* device [160:1] $end
$var reg 1 ;* var_family_cyclone $end
$upscope $end
$scope function FEATURE_FAMILY_CYCLONE10LP $end
$var reg 160 <* device [160:1] $end
$var reg 1 =* var_family_cyclone10lp $end
$upscope $end
$scope function FEATURE_FAMILY_CYCLONEII $end
$var reg 160 >* device [160:1] $end
$var reg 1 ?* var_family_cycloneii $end
$upscope $end
$scope function FEATURE_FAMILY_CYCLONEIII $end
$var reg 160 @* device [160:1] $end
$var reg 1 A* var_family_cycloneiii $end
$upscope $end
$scope function FEATURE_FAMILY_CYCLONEIVE $end
$var reg 160 B* device [160:1] $end
$var reg 1 C* var_family_cycloneive $end
$upscope $end
$scope function FEATURE_FAMILY_CYCLONEIVGX $end
$var reg 160 D* device [160:1] $end
$var reg 1 E* var_family_cycloneivgx $end
$upscope $end
$scope function FEATURE_FAMILY_CYCLONEV $end
$var reg 160 F* device [160:1] $end
$var reg 1 G* var_family_cyclonev $end
$upscope $end
$scope function FEATURE_FAMILY_HARDCOPYIII $end
$var reg 160 H* device [160:1] $end
$var reg 1 I* var_family_hardcopyiii $end
$upscope $end
$scope function FEATURE_FAMILY_HARDCOPYIV $end
$var reg 160 J* device [160:1] $end
$var reg 1 K* var_family_hardcopyiv $end
$upscope $end
$scope function FEATURE_FAMILY_HAS_ALTERA_MULT_ADD_FLOW $end
$var reg 160 L* device [160:1] $end
$var reg 1 M* var_family_has_altera_mult_add_flow $end
$upscope $end
$scope function FEATURE_FAMILY_HAS_INVERTED_OUTPUT_DDIO $end
$var reg 160 N* device [160:1] $end
$var reg 1 O* var_family_has_inverted_output_ddio $end
$upscope $end
$scope function FEATURE_FAMILY_HAS_STRATIXIII_STYLE_RAM $end
$var reg 160 P* device [160:1] $end
$var reg 1 Q* var_family_has_stratixiii_style_ram $end
$upscope $end
$scope function FEATURE_FAMILY_HAS_STRATIXII_STYLE_PLL $end
$var reg 160 R* device [160:1] $end
$var reg 1 S* var_family_has_stratixii_style_pll $end
$upscope $end
$scope function FEATURE_FAMILY_HAS_STRATIXII_STYLE_RAM $end
$var reg 160 T* device [160:1] $end
$var reg 1 U* var_family_has_stratixii_style_ram $end
$upscope $end
$scope function FEATURE_FAMILY_HAS_STRATIX_STYLE_PLL $end
$var reg 160 V* device [160:1] $end
$var reg 1 W* var_family_has_stratix_style_pll $end
$upscope $end
$scope function FEATURE_FAMILY_IS_ALTMULT_ADD_EOL $end
$var reg 160 X* device [160:1] $end
$var reg 1 Y* var_family_is_altmult_add_eol $end
$upscope $end
$scope function FEATURE_FAMILY_MAX10 $end
$var reg 160 Z* device [160:1] $end
$var reg 1 [* var_family_max10 $end
$upscope $end
$scope function FEATURE_FAMILY_MAXII $end
$var reg 160 \* device [160:1] $end
$var reg 1 ]* var_family_maxii $end
$upscope $end
$scope function FEATURE_FAMILY_MAXV $end
$var reg 160 ^* device [160:1] $end
$var reg 1 _* var_family_maxv $end
$upscope $end
$scope function FEATURE_FAMILY_STRATIX $end
$var reg 160 `* device [160:1] $end
$var reg 1 a* var_family_stratix $end
$upscope $end
$scope function FEATURE_FAMILY_STRATIX10 $end
$var reg 160 b* device [160:1] $end
$var reg 1 c* var_family_stratix10 $end
$upscope $end
$scope function FEATURE_FAMILY_STRATIXGX $end
$var reg 160 d* device [160:1] $end
$var reg 1 e* var_family_stratixgx $end
$upscope $end
$scope function FEATURE_FAMILY_STRATIXII $end
$var reg 160 f* device [160:1] $end
$var reg 1 g* var_family_stratixii $end
$upscope $end
$scope function FEATURE_FAMILY_STRATIXIIGX $end
$var reg 160 h* device [160:1] $end
$var reg 1 i* var_family_stratixiigx $end
$upscope $end
$scope function FEATURE_FAMILY_STRATIXIII $end
$var reg 160 j* device [160:1] $end
$var reg 1 k* var_family_stratixiii $end
$upscope $end
$scope function FEATURE_FAMILY_STRATIXIV $end
$var reg 160 l* device [160:1] $end
$var reg 1 m* var_family_stratixiv $end
$upscope $end
$scope function FEATURE_FAMILY_STRATIXV $end
$var reg 160 n* device [160:1] $end
$var reg 1 o* var_family_stratixv $end
$upscope $end
$scope function FEATURE_FAMILY_STRATIX_HC $end
$var reg 160 p* device [160:1] $end
$var reg 1 q* var_family_stratix_hc $end
$upscope $end
$scope function IS_FAMILY_ARRIA10 $end
$var reg 160 r* device [160:1] $end
$var reg 1 s* is_arria10 $end
$upscope $end
$scope function IS_FAMILY_ARRIAGX $end
$var reg 160 t* device [160:1] $end
$var reg 1 u* is_arriagx $end
$upscope $end
$scope function IS_FAMILY_ARRIAIIGX $end
$var reg 160 v* device [160:1] $end
$var reg 1 w* is_arriaiigx $end
$upscope $end
$scope function IS_FAMILY_ARRIAIIGZ $end
$var reg 160 x* device [160:1] $end
$var reg 1 y* is_arriaiigz $end
$upscope $end
$scope function IS_FAMILY_ARRIAV $end
$var reg 160 z* device [160:1] $end
$var reg 1 {* is_arriav $end
$upscope $end
$scope function IS_FAMILY_ARRIAVGZ $end
$var reg 160 |* device [160:1] $end
$var reg 1 }* is_arriavgz $end
$upscope $end
$scope function IS_FAMILY_CYCLONE $end
$var reg 160 ~* device [160:1] $end
$var reg 1 !+ is_cyclone $end
$upscope $end
$scope function IS_FAMILY_CYCLONE10LP $end
$var reg 160 "+ device [160:1] $end
$var reg 1 #+ is_cyclone10lp $end
$upscope $end
$scope function IS_FAMILY_CYCLONEII $end
$var reg 160 $+ device [160:1] $end
$var reg 1 %+ is_cycloneii $end
$upscope $end
$scope function IS_FAMILY_CYCLONEIII $end
$var reg 160 &+ device [160:1] $end
$var reg 1 '+ is_cycloneiii $end
$upscope $end
$scope function IS_FAMILY_CYCLONEIIILS $end
$var reg 160 (+ device [160:1] $end
$var reg 1 )+ is_cycloneiiils $end
$upscope $end
$scope function IS_FAMILY_CYCLONEIVE $end
$var reg 160 *+ device [160:1] $end
$var reg 1 ++ is_cycloneive $end
$upscope $end
$scope function IS_FAMILY_CYCLONEIVGX $end
$var reg 160 ,+ device [160:1] $end
$var reg 1 -+ is_cycloneivgx $end
$upscope $end
$scope function IS_FAMILY_CYCLONEV $end
$var reg 160 .+ device [160:1] $end
$var reg 1 /+ is_cyclonev $end
$upscope $end
$scope function IS_FAMILY_HARDCOPYII $end
$var reg 160 0+ device [160:1] $end
$var reg 1 1+ is_hardcopyii $end
$upscope $end
$scope function IS_FAMILY_HARDCOPYIII $end
$var reg 160 2+ device [160:1] $end
$var reg 1 3+ is_hardcopyiii $end
$upscope $end
$scope function IS_FAMILY_HARDCOPYIV $end
$var reg 160 4+ device [160:1] $end
$var reg 1 5+ is_hardcopyiv $end
$upscope $end
$scope function IS_FAMILY_MAX10 $end
$var reg 160 6+ device [160:1] $end
$var reg 1 7+ is_max10 $end
$upscope $end
$scope function IS_FAMILY_MAXII $end
$var reg 160 8+ device [160:1] $end
$var reg 1 9+ is_maxii $end
$upscope $end
$scope function IS_FAMILY_MAXV $end
$var reg 160 :+ device [160:1] $end
$var reg 1 ;+ is_maxv $end
$upscope $end
$scope function IS_FAMILY_STRATIX $end
$var reg 160 <+ device [160:1] $end
$var reg 1 =+ is_stratix $end
$upscope $end
$scope function IS_FAMILY_STRATIX10 $end
$var reg 160 >+ device [160:1] $end
$var reg 1 ?+ is_stratix10 $end
$upscope $end
$scope function IS_FAMILY_STRATIXGX $end
$var reg 160 @+ device [160:1] $end
$var reg 1 A+ is_stratixgx $end
$upscope $end
$scope function IS_FAMILY_STRATIXII $end
$var reg 160 B+ device [160:1] $end
$var reg 1 C+ is_stratixii $end
$upscope $end
$scope function IS_FAMILY_STRATIXIIGX $end
$var reg 160 D+ device [160:1] $end
$var reg 1 E+ is_stratixiigx $end
$upscope $end
$scope function IS_FAMILY_STRATIXIII $end
$var reg 160 F+ device [160:1] $end
$var reg 1 G+ is_stratixiii $end
$upscope $end
$scope function IS_FAMILY_STRATIXIV $end
$var reg 160 H+ device [160:1] $end
$var reg 1 I+ is_stratixiv $end
$upscope $end
$scope function IS_FAMILY_STRATIXV $end
$var reg 160 J+ device [160:1] $end
$var reg 1 K+ is_stratixv $end
$upscope $end
$scope function IS_VALID_FAMILY $end
$var reg 160 L+ device [160:1] $end
$var reg 1 M+ is_valid $end
$upscope $end
$upscope $end
$scope module mem $end
$scope function ecc_parity $end
$var reg 8 N+ i_eccencparity [7:0] $end
$var integer 32 O+ err [31:0] $end
$var integer 32 P+ flag [31:0] $end
$var integer 32 Q+ flag_double [31:0] $end
$var integer 32 R+ flag_err [31:0] $end
$var integer 32 S+ flag_no_err [31:0] $end
$var integer 32 T+ flag_single [31:0] $end
$var integer 32 U+ flag_triple [31:0] $end
$var integer 32 V+ flag_uncorr [31:0] $end
$var integer 32 W+ found [31:0] $end
$var integer 32 X+ found_2 [31:0] $end
$var integer 32 Y+ n [31:0] $end
$var integer 32 Z+ pointer [31:0] $end
$var integer 32 [+ pointer_max [31:0] $end
$var integer 32 \+ pointer_min [31:0] $end
$upscope $end
$scope function tolower $end
$var reg 8 ]+ conv_char [8:1] $end
$var reg 8 ^+ given_character [8:1] $end
$upscope $end
$scope task convert_hex2ver $end
$var reg 8 _+ c [8:1] $end
$var reg 1 `+ done $end
$var reg 1 a+ error_status $end
$var reg 1 b+ first_normal_record $end
$var reg 1 c+ first_rec $end
$var reg 4 d+ hex [3:0] $end
$var reg 2048 e+ in_file [2048:1] $end
$var reg 1 f+ is_word_address_format $end
$var reg 1 g+ last_rec $end
$var reg 2048 h+ out_file [2048:1] $end
$var integer 32 i+ aaaa [31:0] $end
$var integer 32 j+ aaaa_pre [31:0] $end
$var integer 32 k+ aah [31:0] $end
$var integer 32 l+ aal [31:0] $end
$var integer 32 m+ cc [31:0] $end
$var integer 32 n+ dd [31:0] $end
$var integer 32 o+ divide_factor [31:0] $end
$var integer 32 p+ i [31:0] $end
$var integer 32 q+ ifp [31:0] $end
$var integer 32 r+ j [31:0] $end
$var integer 32 s+ k [31:0] $end
$var integer 32 t+ line_no [31:0] $end
$var integer 32 u+ m [31:0] $end
$var integer 32 v+ nn [31:0] $end
$var integer 32 w+ off_addr [31:0] $end
$var integer 32 x+ ofp [31:0] $end
$var integer 32 y+ r [31:0] $end
$var integer 32 z+ sum [31:0] $end
$var integer 32 {+ tt [31:0] $end
$var integer 32 |+ width [31:0] $end
$scope begin READER $end
$upscope $end
$upscope $end
$scope task convert_mif2ver $end
$var reg 24 }+ address_radix [24:1] $end
$var reg 1 ~+ address_radix_found $end
$var reg 2048 !, buffer [2048:1] $end
$var reg 8 ", c [8:1] $end
$var reg 24 #, data_radix [24:1] $end
$var reg 1 $, data_radix_found $end
$var reg 1 %, depth_found $end
$var reg 1 &, display_address $end
$var reg 1 ', done $end
$var reg 1 (, error_status $end
$var reg 1 ), first_rec $end
$var reg 1 *, get_address $end
$var reg 1 +, get_address_data_pairs $end
$var reg 1 ,, get_address_radix $end
$var reg 1 -, get_data $end
$var reg 1 ., get_data_radix $end
$var reg 1 /, get_depth $end
$var reg 1 0, get_end_address $end
$var reg 1 1, get_start_address $end
$var reg 1 2, get_width $end
$var reg 4 3, hex [3:0] $end
$var reg 2048 4, in_file [2048:1] $end
$var reg 1 5, invalid_address $end
$var reg 1 6, last_rec $end
$var reg 1025 7, memory_data1 [1024:0] $end
$var reg 1025 8, memory_data2 [1024:0] $end
$var reg 2048 9, out_file [2048:1] $end
$var reg 4 :, tmp_char [3:0] $end
$var reg 1 ;, width_found $end
$var integer 32 <, aah [31:0] $end
$var integer 32 =, aal [31:0] $end
$var integer 32 >, address [31:0] $end
$var integer 32 ?, cc [31:0] $end
$var integer 32 @, character_count [31:0] $end
$var integer 32 A, comment_with_double_minus_found [31:0] $end
$var integer 32 B, comment_with_percent_found [31:0] $end
$var integer 32 C, dd [31:0] $end
$var integer 32 D, end_address [31:0] $end
$var integer 32 E, i [31:0] $end
$var integer 32 F, ifp [31:0] $end
$var integer 32 G, line_no [31:0] $end
$var integer 32 H, memory_depth [31:0] $end
$var integer 32 I, memory_width [31:0] $end
$var integer 32 J, negative [31:0] $end
$var integer 32 K, nn [31:0] $end
$var integer 32 L, off_addr [31:0] $end
$var integer 32 M, ofp [31:0] $end
$var integer 32 N, r [31:0] $end
$var integer 32 O, start_address [31:0] $end
$var integer 32 P, sum [31:0] $end
$var integer 32 Q, tt [31:0] $end
$var integer 32 R, value [31:0] $end
$var integer 32 S, width [31:0] $end
$scope begin READER $end
$upscope $end
$upscope $end
$scope task convert_to_ver_file $end
$var reg 2048 T, in_file [2048:1] $end
$var reg 2048 U, out_file [2048:1] $end
$var integer 32 V, width [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b10000110100110001001111010000110100101100110000 1)
b1001110010011110100111001000101 0)
b1001110010011110100111001000101 /)
b10000 .)
b10000 -)
b11 ,)
b1 +)
b1 *)
b100000 ))
b100000 ()
b10011110100011001000110 ')
b1 &)
b1 %)
b100111001000101010101110101111101000100010000010101010001000001010111110100111001001111010111110100111001000010010001010101111101010010010001010100000101000100 $)
b100111001000101010101110101111101000100010000010101010001000001010111110100111001001111010111110100111001000010010001010101111101010010010001010100000101000100 #)
b100111101001100010001000101111101000100010000010101010001000001 ")
b10000110100110001001111010000110100101100110001 !)
b1001110010011110100111001000101 ~(
b1001101001100010011000001001011 }(
b100011001000001010011000101001101000101 |(
b10101010100111001010010010001010100011101001001010100110101010001000101010100100100010101000100 {(
b10101010100111001010010010001010100011101001001010100110101010001000101010100100100010101000100 z(
b1001110010011110100111001000101 y(
b1001110010011110100111001000101 x(
b10000100100100101000100010010010101001001011111010001000101010101000001010011000101111101010000010011110101001001010100 w(
b10000000000000000 v(
b10000000000000000 u(
b0 t(
b0 s(
b0 r(
b1100001011011000111010001110011011110010110111001100011011100100110000101101101 q(
b10101010100111001010101010100110100010101000100 p(
b1 o(
b0 n(
b0 m(
b1 l(
b10000110111100101100011011011000110111101101110011001010010000001010110 k(
b10101010100111001010101010100110100010101000100 j(
b1010010010000010100110100101110011011010110100101100110 i(
b10000110100110001001111010000110100101100110000 h(
b1001110010011110100111001000101 g(
b1001110010011110100111001000101 f(
b10011110100011001000110 e(
b0 d(
b1000 c(
b1 b(
b1 a(
b0 `(
b1 _(
b1 ^(
b0 ](
b0 \(
b1 [(
b1 Z(
b0 Y(
b0 X(
b0 W(
b1 V(
b0 U(
b0 T(
b0 S(
b1 R(
b0 Q(
b0 P(
b0 O(
b0 N(
b0 M(
b0 L(
b1 K(
b0 J(
b0 I(
b0 H(
b0 G(
b0 F(
b0 E(
b0 D(
b100011001000001010011000101001101000101 C(
b100011001000001010011000101001101000101 B(
b0 A(
b0 @(
b10000100101100101010000010000010101001101010011 ?(
b10000100101100101010000010000010101001101010011 >(
b10000100101100101010000010000010101001101010011 =(
b10000100101100101010000010000010101001101010011 <(
b10101010101001101000101010111110100100101001110010100000101010101010100010111110100001101001100010010110100010101001110 ;(
b10101010101001101000101010111110100100101001110010100000101010101010100010111110100001101001100010010110100010101001110 :(
b0 9(
b10000110100110001001111010000110100101100110001 8(
b1001110010011110100111001000101 7(
b1001110010011110100111001000101 6(
b0 5(
b10000110100110001001111010000110100101100110000 4(
b1001110010011110100111001000101 3(
b1001110010011110100111001000101 2(
b10000110100110001001111010000110100101100110000 n'
b1001110010011110100111001000101 m'
b1001110010011110100111001000101 l'
b10000 k'
b10000 j'
b11 i'
b1 h'
b1 g'
b100000 f'
b100000 e'
b100111001000101010101110101111101000100010000010101010001000001010111110100111001001111010111110100111001000010010001010101111101010010010001010100000101000100 d'
b100111001000101010101110101111101000100010000010101010001000001010111110100111001001111010111110100111001000010010001010101111101010010010001010100000101000100 c'
b100111101001100010001000101111101000100010000010101010001000001 b'
b10000110100110001001111010000110100101100110001 a'
b1001110010011110100111001000101 `'
b1001101001100010011000001001011 _'
b100011001000001010011000101001101000101 ^'
b10101010100111001010010010001010100011101001001010100110101010001000101010100100100010101000100 ]'
b10101010100111001010010010001010100011101001001010100110101010001000101010100100100010101000100 \'
b1001110010011110100111001000101 ['
b1001110010011110100111001000101 Z'
b10000100100100101000100010010010101001001011111010001000101010101000001010011000101111101010000010011110101001001010100 Y'
b10000000000000000 X'
b10000000000000000 W'
b0 V'
b1100001011011000111010001110011011110010110111001100011011100100110000101101101 U'
b10101010100111001010101010100110100010101000100 T'
b10000110111100101100011011011000110111101101110011001010010000001010110 S'
b10101010100111001010101010100110100010101000100 R'
b1010010010000010100110100101110011011010110100101100110 Q'
b10000110100110001001111010000110100101100110000 P'
b1001110010011110100111001000101 O'
b1001110010011110100111001000101 N'
b10011110100011001000110 M'
b0 L'
b100011001000001010011000101001101000101 K'
b100011001000001010011000101001101000101 J'
b10000100101100101010000010000010101001101010011 I'
b10000100101100101010000010000010101001101010011 H'
b10000100101100101010000010000010101001101010011 G'
b10000100101100101010000010000010101001101010011 F'
b10101010101001101000101010111110100100101001110010100000101010101010100010111110100001101001100010010110100010101001110 E'
b10101010101001101000101010111110100100101001110010100000101010101010100010111110100001101001100010010110100010101001110 D'
b10000110100110001001111010000110100101100110001 C'
b1001110010011110100111001000101 B'
b1001110010011110100111001000101 A'
b0 @'
b10000110100110001001111010000110100101100110000 ?'
b1001110010011110100111001000101 >'
b1001110010011110100111001000101 ='
b10000 *'
b1010010010000010100110100101110011011010110100101100110 )'
b10000110100110001001111010000110100101100110000 \#
b1001110010011110100111001000101 [#
b1001110010011110100111001000101 Z#
b1111 Y#
b1111 X#
b11 W#
b1 V#
b1 U#
b100000 T#
b100000 S#
b10011110100011001000110 R#
b1 Q#
b1 P#
b100111001000101010101110101111101000100010000010101010001000001010111110100111001001111010111110100111001000010010001010101111101010010010001010100000101000100 O#
b100111001000101010101110101111101000100010000010101010001000001010111110100111001001111010111110100111001000010010001010101111101010010010001010100000101000100 N#
b100111101001100010001000101111101000100010000010101010001000001 M#
b10000110100110001001111010000110100101100110001 L#
b1001110010011110100111001000101 K#
b1001101001100010011000001001011 J#
b100011001000001010011000101001101000101 I#
b10101010100111001010010010001010100011101001001010100110101010001000101010100100100010101000100 H#
b10101010100111001010010010001010100011101001001010100110101010001000101010100100100010101000100 G#
b1001110010011110100111001000101 F#
b1001110010011110100111001000101 E#
b10000100100100101000100010010010101001001011111010001000101010101000001010011000101111101010000010011110101001001010100 D#
b1000000000000000 C#
b1000000000000000 B#
b0 A#
b0 @#
b0 ?#
b1100001011011000111010001110011011110010110111001100011011100100110000101101101 >#
b10101010100111001010101010100110100010101000100 =#
b1 <#
b0 ;#
b0 :#
b1 9#
b10000110111100101100011011011000110111101101110011001010010000001010110 8#
b10101010100111001010101010100110100010101000100 7#
b10101010100111001010101010100110100010101000100 6#
b10000110100110001001111010000110100101100110000 5#
b1001110010011110100111001000101 4#
b1001110010011110100111001000101 3#
b10011110100011001000110 2#
b0 1#
b1000 0#
b1 /#
b1 .#
b0 -#
b1 ,#
b1 +#
b0 *#
b0 )#
b1 (#
b1 '#
b0 &#
b0 %#
b0 $#
b1 ##
b0 "#
b0 !#
b0 ~"
b1 }"
b0 |"
b0 {"
b0 z"
b0 y"
b0 x"
b0 w"
b1 v"
b0 u"
b0 t"
b0 s"
b0 r"
b0 q"
b0 p"
b0 o"
b100011001000001010011000101001101000101 n"
b100011001000001010011000101001101000101 m"
b0 l"
b0 k"
b10000100101100101010000010000010101001101010011 j"
b10000100101100101010000010000010101001101010011 i"
b10000100101100101010000010000010101001101010011 h"
b10000100101100101010000010000010101001101010011 g"
b10101010101001101000101010111110100100101001110010100000101010101010100010111110100001101001100010010110100010101001110 f"
b10101010101001101000101010111110100100101001110010100000101010101010100010111110100001101001100010010110100010101001110 e"
b0 d"
b10000110100110001001111010000110100101100110001 c"
b1001110010011110100111001000101 b"
b1001110010011110100111001000101 a"
b0 `"
b10000110100110001001111010000110100101100110000 _"
b1001110010011110100111001000101 ^"
b1001110010011110100111001000101 ]"
b10000110100110001001111010000110100101100110000 ;"
b1001110010011110100111001000101 :"
b1001110010011110100111001000101 9"
b1111 8"
b1111 7"
b11 6"
b1 5"
b1 4"
b100000 3"
b100000 2"
b100111001000101010101110101111101000100010000010101010001000001010111110100111001001111010111110100111001000010010001010101111101010010010001010100000101000100 1"
b100111001000101010101110101111101000100010000010101010001000001010111110100111001001111010111110100111001000010010001010101111101010010010001010100000101000100 0"
b100111101001100010001000101111101000100010000010101010001000001 /"
b10000110100110001001111010000110100101100110001 ."
b1001110010011110100111001000101 -"
b1001101001100010011000001001011 ,"
b100011001000001010011000101001101000101 +"
b10101010100111001010010010001010100011101001001010100110101010001000101010100100100010101000100 *"
b10101010100111001010010010001010100011101001001010100110101010001000101010100100100010101000100 )"
b1001110010011110100111001000101 ("
b1001110010011110100111001000101 '"
b10000100100100101000100010010010101001001011111010001000101010101000001010011000101111101010000010011110101001001010100 &"
b1000000000000000 %"
b1000000000000000 $"
b0 #"
b1100001011011000111010001110011011110010110111001100011011100100110000101101101 ""
b10101010100111001010101010100110100010101000100 !"
b10000110111100101100011011011000110111101101110011001010010000001010110 ~
b10101010100111001010101010100110100010101000100 }
b10101010100111001010101010100110100010101000100 |
b10000110100110001001111010000110100101100110000 {
b1001110010011110100111001000101 z
b1001110010011110100111001000101 y
b10011110100011001000110 x
b0 w
b100011001000001010011000101001101000101 v
b100011001000001010011000101001101000101 u
b10000100101100101010000010000010101001101010011 t
b10000100101100101010000010000010101001101010011 s
b10000100101100101010000010000010101001101010011 r
b10000100101100101010000010000010101001101010011 q
b10101010101001101000101010111110100100101001110010100000101010101010100010111110100001101001100010010110100010101001110 p
b10101010101001101000101010111110100100101001110010100000101010101010100010111110100001101001100010010110100010101001110 o
b10000110100110001001111010000110100101100110001 n
b1001110010011110100111001000101 m
b1001110010011110100111001000101 l
b0 k
b10000110100110001001111010000110100101100110000 j
b1001110010011110100111001000101 i
b1001110010011110100111001000101 h
b1111 U
b10101010100111001010101010100110100010101000100 T
$end
#0
$dumpvars
b100000 V,
b1010010010000010100110100101110011101100110010101110010 U,
b1010010010000010100110100101110011011010110100101100110 T,
b100000 S,
b0 R,
b0 Q,
b0 P,
b0 O,
b11111111111111111111111111111111 N,
b10000000000000000000000000000100 M,
b0 L,
b0 K,
b0 J,
b100000 I,
b10000000000000000 H,
b1001 G,
b10000000000000000000000000000011 F,
b11111111111111111111111111111111 E,
b0 D,
b0 C,
b0 B,
b0 A,
b0 @,
b0 ?,
b0 >,
b0 =,
b0 <,
1;,
b0 :,
b1010010010000010100110100101110011101100110010101110010 9,
b0 8,
b0 7,
16,
15,
b1010010010000010100110100101110011011010110100101100110 4,
b0 3,
02,
01,
00,
0/,
0.,
0-,
0,,
1+,
1*,
1),
0(,
1',
1&,
1%,
1$,
b11010000110010101111000 #,
b1100100 ",
b0 !,
1~+
b11101010110111001110011 }+
bx |+
bx {+
bx z+
bx y+
bx x+
bx w+
bx v+
bx u+
bx t+
bx s+
bx r+
bx q+
bx p+
bx o+
bx n+
bx m+
bx l+
bx k+
bx j+
bx i+
bx h+
xg+
xf+
bx e+
bx d+
xc+
xb+
xa+
x`+
bx _+
b1000100 ^+
b1100100 ]+
bx \+
bx [+
bx Z+
bx Y+
bx X+
bx W+
bx V+
bx U+
bx T+
bx S+
bx R+
bx Q+
bx P+
bx O+
bx N+
xM+
bx L+
xK+
bx J+
xI+
bx H+
xG+
bx F+
xE+
bx D+
xC+
bx B+
xA+
bx @+
x?+
bx >+
x=+
bx <+
x;+
bx :+
x9+
bx 8+
x7+
bx 6+
x5+
bx 4+
x3+
bx 2+
x1+
bx 0+
x/+
bx .+
x-+
bx ,+
x++
bx *+
x)+
bx (+
x'+
bx &+
x%+
bx $+
x#+
bx "+
x!+
bx ~*
x}*
bx |*
x{*
bx z*
xy*
bx x*
xw*
bx v*
xu*
bx t*
xs*
bx r*
xq*
bx p*
xo*
bx n*
xm*
bx l*
xk*
bx j*
xi*
bx h*
xg*
bx f*
xe*
bx d*
xc*
bx b*
xa*
bx `*
x_*
bx ^*
x]*
bx \*
x[*
bx Z*
xY*
bx X*
xW*
bx V*
xU*
bx T*
xS*
bx R*
xQ*
bx P*
xO*
bx N*
xM*
bx L*
xK*
bx J*
xI*
bx H*
xG*
bx F*
xE*
bx D*
xC*
bx B*
xA*
bx @*
x?*
bx >*
x=*
bx <*
x;*
bx :*
x9*
bx 8*
x7*
bx 6*
x5*
bx 4*
x3*
bx 2*
x1*
bx 0*
x/*
bx .*
x-*
bx ,*
x+*
bx **
x)*
bx (*
bx '*
bx &*
bx %*
bx $*
bx #*
b10000000000000000 "*
b10000000000000000 !*
bx ~)
b0 })
b1000 |)
b0 {)
b0 z)
bx y)
bx x)
bx w)
bx v)
b10000000000000000 u)
bx t)
bx s)
b0 r)
bx q)
bx p)
0o)
0n)
b1010010010000010100110100101110011101100110010101110010 m)
0l)
0k)
0j)
0i)
0h)
0g)
0f)
0e)
0d)
b1001101001100010011000001001011 c)
b0 b)
b0 a)
b0 `)
b0 _)
b0 ^)
b0 ])
0\)
0[)
b0 Z)
b0 Y)
b0 X)
0W)
0V)
1U)
1T)
0S)
0R)
0Q)
0P)
0O)
0N)
b0 M)
b0 L)
b0 K)
b0 J)
0I)
0H)
0G)
b0 F)
bx E)
b0 D)
b0 C)
b0 B)
bx A)
b0 @)
b0 ?)
b0 >)
b0 =)
0<)
x;)
0:)
x9)
08)
07)
b100111101001100010001000101111101000100010000010101010001000001 6)
bx 5)
bx 4)
bx 3)
bx 2)
11(
10(
b0 /(
b0 .(
0-(
0,(
0+(
1*(
1)(
1((
1'(
0&(
0%(
0$(
0#(
1"(
1!(
1~'
1}'
1|'
1{'
1z'
1y'
0x'
0w'
1v'
0u'
0t'
b0 s'
bz r'
b0 q'
bz p'
b0 o'
b0 <'
b0 ;'
b0 :'
bz 9'
b0 8'
17'
16'
15'
14'
13'
12'
11'
00'
0/'
bz .'
b0 -'
0,'
0+'
b0 ('
b0 ''
0&'
1%'
bz $'
b0 #'
bz "'
b0 !'
bx ~&
bx }&
bx |&
bx {&
bx z&
bx y&
bx x&
bx w&
bx v&
bx u&
bx t&
bx s&
bx r&
bx q&
bx p&
bx o&
bx n&
bx m&
bx l&
bx k&
bx j&
bx i&
bx h&
bx g&
bx f&
bx e&
bx d&
xc&
bx b&
bx a&
bx `&
bx _&
x^&
x]&
bx \&
bx [&
xZ&
xY&
xX&
xW&
xV&
xU&
xT&
xS&
xR&
xQ&
xP&
xO&
xN&
xM&
xL&
bx K&
bx J&
bx I&
xH&
bx G&
bx F&
bx E&
bx D&
bx C&
bx B&
bx A&
bx @&
bx ?&
bx >&
bx =&
bx <&
bx ;&
bx :&
bx 9&
bx 8&
bx 7&
bx 6&
bx 5&
bx 4&
bx 3&
bx 2&
x1&
x0&
bx /&
bx .&
x-&
x,&
x+&
x*&
bx )&
bx (&
bx '&
bx &&
bx %&
bx $&
bx #&
bx "&
bx !&
bx ~%
bx }%
bx |%
bx {%
bx z%
bx y%
bx x%
bx w%
bx v%
xu%
bx t%
xs%
bx r%
xq%
bx p%
xo%
bx n%
xm%
bx l%
xk%
bx j%
xi%
bx h%
xg%
bx f%
xe%
bx d%
xc%
bx b%
xa%
bx `%
x_%
bx ^%
x]%
bx \%
x[%
bx Z%
xY%
bx X%
xW%
bx V%
xU%
bx T%
xS%
bx R%
xQ%
bx P%
xO%
bx N%
xM%
bx L%
xK%
bx J%
xI%
bx H%
xG%
bx F%
xE%
bx D%
xC%
bx B%
xA%
bx @%
x?%
bx >%
x=%
bx <%
x;%
bx :%
x9%
bx 8%
x7%
bx 6%
x5%
bx 4%
x3%
bx 2%
x1%
bx 0%
x/%
bx .%
x-%
bx ,%
x+%
bx *%
x)%
bx (%
x'%
bx &%
x%%
bx $%
x#%
bx "%
x!%
bx ~$
x}$
bx |$
x{$
bx z$
xy$
bx x$
xw$
bx v$
xu$
bx t$
xs$
bx r$
xq$
bx p$
xo$
bx n$
xm$
bx l$
xk$
bx j$
xi$
bx h$
xg$
bx f$
xe$
bx d$
xc$
bx b$
xa$
bx `$
x_$
bx ^$
x]$
bx \$
x[$
bx Z$
xY$
bx X$
xW$
bx V$
xU$
bx T$
xS$
bx R$
xQ$
bx P$
bx O$
bx N$
bx M$
bx L$
bx K$
b1000000000000000 J$
b1000000000000000 I$
b0 H$
b1000 G$
b0 F$
b0 E$
bx D$
bx C$
bx B$
bx A$
b1000000000000000 @$
bx ?$
bx >$
b0 =$
bx <$
bx ;$
0:$
09$
08$
07$
06$
05$
04$
03$
02$
01$
b1001101001100010011000001001011 0$
b0 /$
b0 .$
b0 -$
b0 ,$
b0 +$
b0 *$
0)$
0($
b0 '$
b0 &$
b0 %$
0$$
0#$
1"$
1!$
0~#
0}#
0|#
0{#
0z#
0y#
b0 x#
b0 w#
b0 v#
b0 u#
0t#
0s#
0r#
b0 q#
bx p#
b0 o#
b0 n#
b0 m#
bx l#
b0 k#
b0 j#
b0 i#
b0 h#
0g#
xf#
0e#
xd#
0c#
0b#
b100111101001100010001000101111101000100010000010101010001000001 a#
bx `#
bx _#
bx ^#
bx ]#
1\"
1["
b0 Z"
b0 Y"
0X"
0W"
0V"
1U"
1T"
1S"
1R"
0Q"
0P"
0O"
0N"
1M"
1L"
1K"
1J"
1I"
1H"
1G"
1F"
0E"
0D"
1C"
0B"
0A"
b0 @"
bz ?"
b0 >"
bz ="
b0 <"
b0 g
b0 f
b0 e
bz d
b0 c
1b
1a
1`
1_
1^
1]
1\
0[
0Z
bz Y
b0 X
0W
0V
b0 S
b0 R
0Q
1P
bz O
b0 N
bz M
b0 L
b0 K
b0 J
b0 I
b0 H
b0 G
b0 F
bz E
bz D
b0 C
0B
0A
0@
b0 ?
b0 >
0=
0<
0;
0:
09
b0 8
b0 7
06
b1111111111111110 5
04
b0 3
b0 2
b0 1
b0 0
b0 /
b0 .
b0 -
b0 ,
b0 +
b0 *
b0 )
0(
1'
bz &
bz %
b0 $
0#
0"
0!
$end
#20000
b111110000000000000111000 *
bx )
bx H
b111110000000000000111000 +
b111110000000000000111000 K
bx F
bx ''
bx ;'
bx /(
bx b)
b111110000000000000111000 G
b111110000000000000111000 ('
b111110000000000000111000 <'
b111110000000000000111000 .(
b111110000000000000111000 a)
bx I
bx R
bx f
bx Z"
bx /$
bx `)
b111110000000000000111000 _)
bx -$
b1 L
b1 X
b1 <"
b11111111111111111111111111111111 C)
bz >)
bz K)
1g)
1e)
18)
b11111111111111111111111111111111 ?)
0;)
1d)
17)
1f)
1G)
1I)
1n)
b11111111111111111111111111111111 n#
bz i#
bz v#
14$
12$
1c#
b11111111111111111111111111111111 j#
0f#
11$
1b#
13$
1r#
1t#
19$
0=
b1 $
b1 -
b1 C
b1 !'
b1 -'
b1 o'
1"
1!
#40000
09$
0n)
0"
0!
#60000
b1010000 +
b1010000 K
b1010000 G
b1010000 ('
b1010000 <'
b1010000 .(
b1010000 a)
b0 *
b10 L
b10 X
b10 <"
b1010000 _)
b1111100000000000001 >
16
1:
19
b1 8
b11111 1
0=
b10 $
b10 -
b10 C
b10 !'
b10 -'
b10 o'
b1 /
04$
b1 h#
03$
19$
0g)
b1 =)
0f)
1n)
1"
1!
#80000
0n)
09$
0"
0!
#100000
b0 +
b0 K
b0 G
b0 ('
b0 <'
b0 .(
b0 a)
b0 _)
b0 *
b11 L
b11 X
b11 <"
1g)
b10 =)
1f)
1n)
14$
b10 h#
13$
19$
b0 >
06
0:
09
b0 8
b0 1
0=
b1 .
b11 $
b11 -
b11 C
b11 !'
b11 -'
b11 o'
b10 /
1"
1!
#120000
09$
0n)
0"
0!
#140000
b100 L
b100 X
b100 <"
0=
b10 .
b100 $
b100 -
b100 C
b100 !'
b100 -'
b100 o'
b11 /
04$
b11 h#
03$
19$
0g)
b11 =)
0f)
1n)
1"
1!
#160000
0n)
09$
0"
0!
#180000
b101 L
b101 X
b101 <"
1g)
b100 =)
1f)
1n)
14$
b100 h#
13$
19$
0=
b11 .
b101 $
b101 -
b101 C
b101 !'
b101 -'
b101 o'
b100 /
1"
1!
#200000
09$
0n)
0"
0!
#220000
b110 L
b110 X
b110 <"
0=
b100 .
b110 $
b110 -
b110 C
b110 !'
b110 -'
b110 o'
b101 /
04$
b101 h#
03$
19$
0g)
b101 =)
0f)
1n)
1"
1!
#240000
0n)
09$
0"
0!
#260000
b111 L
b111 X
b111 <"
1g)
b110 =)
1f)
1n)
14$
b110 h#
13$
19$
0=
b101 .
b111 $
b111 -
b111 C
b111 !'
b111 -'
b111 o'
b110 /
1"
1!
#280000
09$
0n)
0"
0!
#300000
b1000 L
b1000 X
b1000 <"
0=
b110 .
b1000 $
b1000 -
b1000 C
b1000 !'
b1000 -'
b1000 o'
b111 /
04$
b111 h#
03$
19$
0g)
b111 =)
0f)
1n)
1"
1!
#320000
0n)
09$
0"
0!
#340000
b1001 L
b1001 X
b1001 <"
1g)
b1000 =)
1f)
1n)
14$
b1000 h#
13$
19$
0=
b111 .
b1001 $
b1001 -
b1001 C
b1001 !'
b1001 -'
b1001 o'
b1000 /
1"
1!
#360000
09$
0n)
0"
0!
#380000
b1010 L
b1010 X
b1010 <"
0=
b1000 .
b1010 $
b1010 -
b1010 C
b1010 !'
b1010 -'
b1010 o'
b1001 /
04$
b1001 h#
03$
19$
0g)
b1001 =)
0f)
1n)
1"
1!
#400000
0n)
09$
0"
0!
