fn Main() void {
  var x: u32;
  var place: u32 = 1;

  var chr: u32;
  do ((chr = @ldkey()) != 0x33) {
    if (chr < 0x36 or chr > 0x3F) continue;
    var temp: u32 = chr-0x35;
    if (temp == 10) temp = 0;
    x += temp * place;
    place *= 10;
  }
  BREAKPOINT;

  Print(Fac(x));

  while (true) {}
}

fn Fac(n: u32) u32 {
  if (n == 1) return 1;
  return n*Fac(n-1);
}

fn Print(x: u32) void {
  var bcd: u32 = 0;

  for (var _: u32 = 0; _ < 32; _ += 1) {
    bcd = @dab(bcd);
    bcd <<= 1;
    if (x & (1 << 31)) {
      bcd |= 1;
    }
    x <<= 1;
  }

  var idx: u32 = 0;
  for (var nibble: i32 = <i32> @andn(@log(bcd), 3); nibble >= 0; nibble -= 4) {
    @stchr((@bsf(bcd, nibble, 4)&15) + 48, idx, 0xFFFFFFFF, 0);
    idx += 1;
  }
}