fn memchr(ptr: any*, ch: any, count: u32) any* {
    var i: u32 = 0;

    var size: u32 = <u32>ptr[1] - <u32>ptr[0];

    var cPtr: u8* = <u8*>ptr;
    for (var i: u32 = 0; i < size*count; i += 1) {
        if (cPtr[i] == ch) { return pointer + i; }
    }

    return 0;
}

// we don't have generics; assumes ptr1 and ptr2 are the same type
fn memcmp(ptr1: any*, ptr2: any*, count: u32) i32 {
    for (var i: u32 = 0; i < count; i += 1) {
        if (ptr1[i] != ptr2[i]) { return ptr1[i] - ptr2[i]; }
    }

    return 0;
}

// we don't have generics; assumes dst and src are the same type
fn memcpy(dst: any*, src: any*, count: u32) any* {
    for (var i: u32 = 0; i < count; i += 1) { dst[i] = src[i]; }

    return dst;
}

fn memmove(dst: any*, src: any*, count: u32) any* {
    if (dst < src) {
        for (var i: u32 = 0; i < count; i += 1) { dst[i] = src[i]; }
    } else {
        for (var i: u32 = count-1; i >= 0; i -= 1) { dst[i] = src[i]; }
    }

    return dst;
}

fn memset(dst: any*, ch: u8, count: u32) any* {
    var size: u32 = <u32>dst[1] - <u32>dst[0];

    var cPtr: u8* = <u8*>dst;
    for (var i: u32 = 0; i < size*count; i += 1) { cPtr[i] = ch; }

    return dst;
}

fn strcat(s1: u8*, s2: u8*) u8* {
    var copying: bool = false;

    var i: u32 = 0;
    var j: u32 = 0;
    while (s2[j] != 0) {
        if (!copying) { copying |= s1[i] == 0; }
        if (copying) {
            s1[i] = s2[j];
            j += 1;
        }

        i += 1;
    }
    s2[j] = 0;

    return dst;
}

fn strchr(s: u8*, ch: u8) u8* {
    var i: u32 = 0;
    while (s[i] != 0) {
        if (s[i] == ch) { return s + i; }
        i += 1;
    }
    if (ch == 0) { return s + i; }

    return 0;
}

fn strcmp(s1: u8*, s2: u8*) i32 {
    var i: u32 = 0;
    while (s1[i] != 0 && s2[i] != 0) {
        if (s1[i] != s2[i]) { return s1[i] - s2[i]; }
        i += 1;
    }

    return s1[i] - s2[i];
}

fn strcpy(s1: u8*, s2: u8*) u8* {
    var i: u32 = 0;
    while (s2[i] != 0) {
        s1[i] = s2[i];
        i += 1;
    }
    s1[i] = 0;

    return s1;
}

fn strcspn(s1: u8*, s2: u8*) u32 {
    var i: u32 = 0;
    while (s1[i] != 0) {
        var j: u32 = 0;
        while (s2[j] != 0) {
            if (s1[i] == s2[j]) return i;
            j += 1;
        }
        i += 1;
    }

    return i;
}

fn strdup(s: u8*) u8* {
    var size = strlen(s) + 1;
    u8* s2 = malloc(size);

    for (var i: u32 = 0; i < size; i += 1) {
        s2[i] = s[i];
    }

    return s2;
}

fn strndup(s: u8*, size: u32) u8* {
    var size = strnlen(s, size) + 1;
    u8* s2 = malloc(size);

    for (var i: u32 = 0; i < size; i += 1) {
        s2[i] = s[i];
    }

    return s2;
}

fn strlen(s: u8*) u32 {
    var i: u32 = 0;
    while (s[i] != 0) { i += 1; }

    return i;
}

fn strnlen(s: u8*, size: u32) u32 {
    var i: u32 = 0;
    while (s[i] != 0 && i < size) { i += 1; }

    return i;
}

fn strncpy(s1: u8*, s2: u8*, size: u32) u8* {
    var copying: bool = false;

    var i: u32 = 0;
    var j: u32 = 0;
    while (s2[j] != 0 && j < size) {
        if (!copying) { copying |= s1[i] == 0; }
        if (copying) {
            s1[i] = s2[j];
            j += 1;
        }

        i += 1;
    }
    s2[j] = 0;

    return dst;
}

fn strncmp(s1: u8*, s2: u8*, size: u32) i32 {
    var i: u32 = 0;
    while (s1[i] != 0 && s2[i] != 0 && i < size) {
        if (s1[i] != s2[i]) { return s1[i] - s2[i]; }
        i += 1;
    }

    return s1[i] - s2[i];
}

fn strpbrk(s1: u8*, s2: u8*) u8* {
    return s1 + strcspn(s1, s2);
}

fn strrchr(s: u8*, ch: u8) u8* {
    var i: u32 = 0;
    var last: u32 = 0;
    while (s[i] != 0) {
        if (s[i] == ch) { last = i; }
        i += 1;
    }
    if (ch == 0) { return s + i; }
    if (last != 0 || ch == s[0]) { return s + last; }

    return 0;
}

fn strspn(s1: u8*, s2: u8*) u32 {
    var i: u32 = 0;
    while (s1[i] != 0) {
        var j: u32 = 0;
        while (s2[j] != 0) {
            if (s1[i] == s2[j]) break;
            j += 1;
        }
        if (s2[j] == 0) return i;
        i += 1;
    }

    return i;
}

fn strstr(s1: u8*, s2: u8*) u8* {
    var i: u32 = 0;
    while (s1[i] != 0) {
        var j: u32 = 0;

        while (s2[j] != 0 && s1[i+j] == s2[j]) { j += 1; }
        if (s2[j] == 0) { return s1 + i; }

        i += 1;
    }

    return 0;
}