start: ex_decl+

ex_decl: struct_decl 
       | fn_decl

//include_dir: INCLUDE ident

struct_decl: STRUCT ident LCURLY struct_expr RCURLY
struct_expr: args fn_decl* [struct_expr]

fn_decl: FN ident LPAREN [args] RPAREN type stmt

stmt: blockstmt 
    | declexpr
    | declstmt
    | exprstmt
    | jumpstmt
    | iterstmt
    | selstmt
    | assumestmt

assumestmt: ASSUME assumptionbody SEMICOLON
assumptionbody: "unreachable" -> assumeunreachable

blockstmt: LCURLY stmt* RCURLY
encexprsmt: [expr] [SEMICOLON]
exprstmt: [expr] SEMICOLON

declstmt: VAR ident COLON type SEMICOLON
declexpr: VAR ident [COLON type] EQUAL expr SEMICOLON
expr: assgexpr
?assgexpr: lorexpr
        | postexpr assgop assgexpr
?lorexpr: landexpr
        | lorexpr OR landexpr
?landexpr: lunaryexpr
        | landexpr AND lunaryexpr
?lunaryexpr: relexpr
	| EMARK lunaryexpr
?relexpr: borexpr 
	| borexpr relop borexpr
?borexpr: bxorexpr
	| TRUE -> true
	| FALSE -> false
        | borexpr PIPE bxorexpr
?bxorexpr: bandexpr
        | bxorexpr CARROT bandexpr
?bandexpr: addexpr
        | bandexpr AMPERSAND addexpr
?addexpr: multexpr
        | addexpr addop multexpr
?multexpr: castexpr
        | multexpr multop castexpr
?castexpr: unaryexpr
        | "<" type ">" castexpr
?unaryexpr: postexpr
        | unaryop castexpr
?postexpr: primexpr
	| AT ident LPAREN [argexprs] RPAREN -> intrinsic
        | ident LCURLY [structassgs] RCURLY -> structinit
        | postexpr LBRACK expr PLUSCOLON expr RBRACK -> sliceexpr
        | postexpr LBRACK expr RBRACK -> indexpr
        | postexpr LPAREN [argexprs] RPAREN -> callexpr
        | postexpr DOT ASTERISK -> derefexpr
        | postexpr DOT AMPERSAND -> addrexpr
        | postexpr DOT QMARK -> denullexpr
        | postexpr DOT ident -> fieldexpr
        | postexpr COLON ident -> colonexpr
	| BREAKPOINT -> breakpoint
?primexpr: constant
        | ident
        | string
        | LPAREN expr RPAREN
?jumpstmt: CONTINUE SEMICOLON -> continue
	| BREAK SEMICOLON -> break
	| RETURN SEMICOLON -> return
	| RETURN expr SEMICOLON -> returnexpr
?iterstmt: whileelsestmt
	| whilestmt
	| forelsestmt
	| forstmt
	| doelsestmt
	| dostmt
?selstmt: ifelsestmt
	| ifstmt

structassgs: structassg (COMMA structassg)* COMMA?
structassg: ident COLONEQUALS assgexpr

whileelsestmt: WHILE LPAREN expr RPAREN stmt ELSE stmt
whilestmt: WHILE LPAREN expr RPAREN stmt
forelsestmt: FOR LPAREN stmt exprstmt encexprsmt RPAREN stmt ELSE stmt
forstmt: FOR LPAREN stmt exprstmt encexprsmt RPAREN stmt
doelsestmt: DO LPAREN expr RPAREN stmt ELSE stmt
dostmt: DO LPAREN expr RPAREN stmt

ifelsestmt: IF LPAREN expr RPAREN stmt ELSE stmt
ifstmt: IF LPAREN expr RPAREN stmt

argexprs: assgexpr (COMMA assgexpr)* COMMA?
args: arg (COMMA arg)* COMMA?
arg: ident COLON type

ident: /[_a-zA-Z][_a-zA-Z0-9]*/
identtype: ident ASTERISK* [LBRACK constant RBRACK]
type: INT | VOID | identtype
string: /"([^\x00"]*\x01)*[^\x01"]*"/
//string: /"[^"]*"/
constant: CHAR | hexint | decint

decint: "0d" UD* | D UD*
hexint: "0x" UH*
CHAR: /\'(?:.|(?:\\.)|(?:\\x..))\'/

INT: /[ui][0-9]+(?: *)\**(\[[0-9]+\])?/

assgop: EQUAL | PLUSEQUAL | MINUSEQUAL | LANGLEEEEQUAL | RANGLEEEEQUAL | LANGLEEEQUAL | RANGLEEEQUAL | PERCENTEQUAL | SLASHEQUAL | ASTERISKEQUAL | AMPERSANDEQUAL | PIPEEQUAL | CARROTEQUAL
relop: LANGLEQ | RANGLEQ | EQUALL | NEQUAL | LANGLE | RANGLE
addop: PLUS | MINUS
multop: LANGLEEE | RANGLEEE | LANGLEE | RANGLEE | PERCENT | SLASH | ASTERISK
unaryop: PLUS | MINUS | TILDE

BREAKPOINT: "BREAKPOINT"
VOID: "void"
EQUAL: "="
LEFTARROW: "CAST"
FN:  "fn"
LPAREN: "("
RPAREN: ")"
LCURLY: "{"
RCURLY: "}"
COMMA: ","
COLON: ":"
SEMICOLON: ";"
DOT: "."
LBRACK: "["
RBRACK: "]"
ASTERISK: "*"
AMPERSAND: "&"
QMARK: "?"
OR: "or"
AND: "and"
PIPE: "|"
CARROT: "^"
PLUS: /\+(?!:)/
PLUSCOLON: "+:"
PLUSEQUAL: "+="
MINUS: "-"
MINUSEQUAL: "-="
LANGLEEEEQUAL: "<<<=" 
RANGLEEEEQUAL: ">>>=" 
LANGLEEEQUAL: "<<=" 
RANGLEEEQUAL: ">>=" 
PERCENTEQUAL: "%=" 
SLASHEQUAL: "/=" 
ASTERISKEQUAL: "*=" 
AMPERSANDEQUAL: "&=" 
PIPEEQUAL: "|=" 
CARROTEQUAL: "^=" 
LANGLEEE: "<<<"
LANGLEE: "<<"
LANGLE.10: /<(?![:=<])/
RANGLEEE: ">>"
RANGLEE: ">>"
RANGLE: ">"
PERCENT: "%"
SLASH: "/"
TILDE: "~"
EMARK: "!"
LANGLEQ: "<="
RANGLEQ: ">="
NEQUAL: "!="
EQUALL: "=="
VAR: "var"
CONTINUE: "continue"
BREAK: "break"
RETURN: "return"
WHILE: "while"
DO: "do"
IF: "if"
ELSE: "else"
FOR: "for"
AT: "@"
TRUE: "true"
FALSE: "false"
STRUCT: "struct"
INCLUDE: "#include"
COLONEQUALS: ":="
ASSUME: "assume"

COMMENT: /\/\/[^\r\n]*/

%ignore COMMENT
%ignore WS
%ignore "\n"
%ignore "\r"
WS: (" " | /\t/ )+

D: /[0-9]/
UD: /[_0-9]/
H: /[0-9a-fA-F]/
UH: /[_0-9a-fA-F]/

