0000 :		mov.e r31, #3296			// Setup stack pointer
	_Main__:
0002 :		mov r0, #1				// expr `mov place, 1`
	L3:
0003 :		ldw.e r1, r31, #2048				// assign r1 = `chr`
0005 :		ult.e r1, #54				// expr `ult chr, 54`
0007 :		c.jmp L5:				// expr `c.jmp L5:`
	_L8:
0008 :		jmp L7:				// expr `jmp L7:`
	L7:
0009 :		ugt.e r1, #63				// expr `ugt chr, 63`
000B :		c.jmp L5:				// expr `c.jmp L5:`
	_L10:
000C :		jmp L6:				// expr `jmp L6:`
	L5:
000D :		jmp L2:				// expr `jmp L2:`
	L6:
000E :		sub.e r2, r1, #53				// expr `sub t13, chr, 53`
0010 :		mov r3, r2				// expr `mov temp, t13`
0011 :		eq r3, #10				// expr `eq temp, 10`
0012 :		c.jmp L14:				// expr `c.jmp L14:`
	_L16:
0013 :		jmp L15:				// expr `jmp L15:`
	L14:
0014 :		mov r3, #0				// expr `mov temp, 0`
	L15:
0015 :		mul r2, r3, r0				// expr `mul t19, temp, place`
0016 :		ldw r3, r31, #0				// assign r3 = `x`
0017 :		add r3, r3, r2				// expr `add x, x, t19`
0018 :		mul r0, r0, #10				// expr `mul place, place, 10`
0019 :		stw r3, r31, #0
	L2:
001A :		ldkey r2				// expr `ldkey t20`
001B :		mov r1, r2				// expr `mov chr, t20`
001C :		ne.e r1, #51				// expr `ne chr, 51`
001E :		c.stw.e r1, r31, #2048
0020 :		c.jmp L3:				// expr `c.jmp L3:`
	_L21:
0021 :		jmp L4:				// expr `jmp L4:`
	L4:
0022 :		ldw r0, r31, #0				// assign r0 = `x`	// expr `argst 0, x`
0023 :		add.e r31, r31, #128
0025 :		call _Fac__:
0026 :		sub.e r31, r31, #128				// expr `call Fac`
0028 :		mov r1, r0				// expr `mov fac, t24`
0029 :		mov r0, r1				// assign r0 = `fac`	// expr `argst 0, fac`
002A :		add.e r31, r31, #224
002C :		call _BCD__:
002D :		sub.e r31, r31, #224				// expr `call BCD`
002F :		mov r1, r0				// expr `mov bcd, t25`
0030 :		mov r0, #0				// expr `mov idx, 0`
0031 :		log r2, r1				// expr `log t30, bcd`
0032 :		andn r3, r2, #3				// expr `andn t31, t30, 3`
0033 :		mov r2, r3				// expr `mov t32, t31`
0034 :		mov r3, r2				// expr `mov nibble, t32`
	L27:
0035 :		sge r3, #0				// expr `sge nibble, 0`
0036 :		c.jmp L28:				// expr `c.jmp L28:`
	_L33:
0037 :		jmp L29:				// expr `jmp L29:`
	L28:
0038 :		bsf r2, r1, r3, #4				// expr `bsf t35, bcd, nibble, 4`
0039 :		and r4, r2, #15				// expr `and t36, t35, 15`
003A :		add.e r2, r4, #48				// expr `add t37, t36, 48`
003C :		stchr.e r2, r0, #4294967295, #0				// expr `stchr t37, idx, 4294967295, 0`
003E :		add r0, r0, #1				// expr `add idx, idx, 1`
003F :		sub r3, r3, #4				// expr `sub nibble, nibble, 4`
0040 :		jmp L27:				// expr `jmp L27:`
	L39:
0041 :		jmp L40:				// expr `jmp L40:`
	L40:
0042 :		jmp L39:				// expr `jmp L39:`
	_Fac__:
0043 :		eq r0, #1				// expr `eq n, 1`
0044 :		c.jmp L44:				// expr `c.jmp L44:`
	_L46:
0045 :		jmp L45:				// expr `jmp L45:`
	L44:
0046 :		mov r0, #1				// expr `retst 0, 1`
0047 :		ret 				// expr `ret `
	L45:
0048 :		sub r1, r0, #1				// expr `sub t49, n, 1`
0049 :		stw r0, r31, #0				// clobbering r0 (`n`)
004A :		mov r0, r1				// assign r0 = `t49`	// expr `argst 0, t49`
004B :		add.e r31, r31, #64
004D :		call _Fac__:
004E :		sub.e r31, r31, #64				// expr `call Fac`
0050 :		ldw r2, r31, #0				// assign r2 = `n`
0051 :		mul r1, r2, r0				// expr `mul t51, n, t50`
0052 :		mov r0, r1				// assign r0 = `t51`	// expr `retst 0, t51`
0053 :		ret 				// expr `ret `
	_BCD__:
0054 :		mov r1, #0				// expr `mov y, 0`
0055 :		mov r2, #0				// expr `mov _, 0`
	L54:
0056 :		ult.e r2, #32				// expr `ult _, 32`
0058 :		c.jmp L55:				// expr `c.jmp L55:`
	_L58:
0059 :		jmp L56:				// expr `jmp L56:`
	L55:
005A :		dab r3, r1				// expr `dab t60, y`
005B :		mov r1, r3				// expr `mov y, t60`
005C :		bsl r1, r1, #1				// expr `bsl y, y, 1`
005D :		and.e r3, r0, #2147483648				// expr `and t64, x, 2147483648`
005F :		eq r3, #0				// expr `eq t64, 0`
0060 :		c.jmp L62:				// expr `c.jmp L62:`
	L61:
0061 :		or r1, r1, #1				// expr `or y, y, 1`
	L62:
0062 :		bsl r0, r0, #1				// expr `bsl x, x, 1`
0063 :		add r2, r2, #1				// expr `add _, _, 1`
0064 :		jmp L54:				// expr `jmp L54:`
	L56:
0065 :		mov r0, r1				// assign r0 = `y`	// expr `retst 0, y`
0066 :		ret 				// expr `ret `
