0000 :		mov.e r31, #1760			// Setup stack pointer
	_Main__:
0002 :		mov r0, #7				// expr `argst 0, 7`
0003 :		add.e r31, r31, #32
0005 :		call _HSB__:
0006 :		sub.e r31, r31, #32				// expr `call HSB`
0008 :		mov r1, r0				// expr `mov magic, t14`
0009 :		eq r1, #4				// expr `eq magic, 4`
000A :		c.jmp L15:				// expr `c.jmp L15:`
	_L17:
000B :		jmp L16:				// expr `jmp L16:`
	L15:
000C :		ldw r0, r31, #0				// assign r0 = `x`
000D :		mov r30, #3
000E :		mov r0, r30				// expr `mov x, 3`
000F :		stw r0, r31, #0
	L16:
0010 :		mov r30, #0
0011 :		mov r0, r30				// expr `mov i, 0`
	L19:
0012 :		ult.e r0, #1000				// expr `ult i, 1000`
0014 :		c.jmp L20:				// expr `c.jmp L20:`
	_L23:
0015 :		jmp L22:				// expr `jmp L22:`
	L20:
0016 :		ldw r1, r31, #0				// assign r1 = `x`
0017 :		ugt r0, r1				// expr `ugt i, x`
0018 :		c.jmp L25:				// expr `c.jmp L25:`
	_L27:
0019 :		jmp L26:				// expr `jmp L26:`
	L25:
001A :		mov r1, r0				// expr `mov x, i`
001B :		stw r1, r31, #0
001C :		jmp L21:				// expr `jmp L21:`
	L26:
001D :		add r2, r0, #1				// expr `add t30, i, 1`
001E :		mov r0, r2				// expr `mov i, t30`
001F :		stw r1, r31, #0
0020 :		jmp L19:				// expr `jmp L19:`
	L21:
0021 :		ldw r0, r31, #0				// assign r0 = `x`	// expr `retst 0, x`
0022 :		ret 				// expr `ret`
	_HSB__:
0023 :		mov r30, #1
0024 :		mov r1, r30				// expr `mov u_tbit, 1`
	L1:
0025 :		ne r1, #0				// expr `ne u_tbit, 0`
0026 :		c.jmp L2:				// expr `c.jmp L2:`
	_L4:
0027 :		jmp L3:				// expr `jmp L3:`
	L2:
0028 :		and r2, r0, r1				// expr `and t8, x, u_tbit`
0029 :		ne r2, #0				// expr `ne t8, 0`
002A :		c.jmp L6:				// expr `c.jmp L6:`
	_L9:
002B :		jmp L7:				// expr `jmp L7:`
	L6:
002C :		ldw.e r2, r31, #32				// assign r2 = `bit`
002E :		mov r2, r1				// expr `mov bit, u_tbit`
002F :		stw.e r2, r31, #32
	L7:
0031 :		bsl r2, r1, #1				// expr `bsl t11, u_tbit, 1`
0032 :		mov r1, r2				// expr `mov u_tbit, t11`
0033 :		jmp L1:				// expr `jmp L1:`
	L3:
0034 :		ldw.e r0, r31, #32				// assign r0 = `bit`	// expr `retst 0, bit`
0036 :		ret 				// expr `ret`
